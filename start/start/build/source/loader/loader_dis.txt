
/Users/hyros/code/OS/mycode/start/start/build/source/loader/loader.elf:     file format elf32-i386
/Users/hyros/code/OS/mycode/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000011d2 memsz 0x000011d2 flags r-x
    LOAD off    0x000001e0 vaddr 0x000091e0 paddr 0x000091e0 align 2**12
         filesz 0x00000000 memsz 0x00000054 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000195  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003d  00008195  00008195  00001195  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000054  000091e0  000091e0  000011e0  2**5
                  ALLOC
  3 .comment      00000012  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000011e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   0000022d  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000145  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   00000137  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000078  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000201  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line_str 0000014f  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000016  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	0000003c show_msg
0000803f l     F .text	00000139 detect_memory
00000000 l    df *ABS*	00000000 loader_32.c
00008178 g     F .text	0000001d loader_entry
000091e0 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
000091d2 g       .bss	00000000 __bss_start
000091d2 g       .bss	00000000 _edata
00009234 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 75 01             	jmp    8178 <loader_entry>

00008003 <show_msg>:
__asm__(".code16gcc"); //生成16位代码
#include "loader.h"

boot_info_t boot_info;

static void show_msg(const char* msg){
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    8008:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while((c=*msg++)!='\0'){
    800c:	eb 0c                	jmp    801a <show_msg+0x17>
        __asm__ __volatile__(
    800e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8014:	b4 0e                	mov    $0xe,%ah
    8016:	88 c0                	mov    %al,%al
    8018:	cd 10                	int    $0x10
    while((c=*msg++)!='\0'){
    801a:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    801f:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8024:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8029:	67 66 0f b6 00       	movzbl (%eax),%eax
    802e:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8032:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8037:	75 d5                	jne    800e <show_msg+0xb>
            "mov $0xe, %%ah\n\t"
            "mov %[ch], %%al\n\t"
            "int $0x10"::[ch]"r"(c)
        );
    }
}
    8039:	90                   	nop
    803a:	90                   	nop
    803b:	66 c9                	leavel
    803d:	66 c3                	retl

0000803f <detect_memory>:

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7
static void  detect_memory(void) {
    803f:	66 55                	push   %ebp
    8041:	66 89 e5             	mov    %esp,%ebp
    8044:	66 57                	push   %edi
    8046:	66 56                	push   %esi
    8048:	66 53                	push   %ebx
    804a:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    804e:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8055:	00 00 
	SMAP_entry_t smap_entry;
	int signature, bytes;

    show_msg("try to detect memory:");
    8057:	66 68 95 81 00 00    	pushl  $0x8195
    805d:	66 e8 a0 ff ff ff    	calll  8003 <show_msg>
    8063:	66 83 c4 04          	add    $0x4,%esp

	// 初次：EDX=0x534D4150,EAX=0xE820,ECX=24,INT 0x15, EBX=0（初次）
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
    8067:	66 c7 06 30 92 00 00 	movl   $0x0,-0x6dd0
    806e:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8070:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8077:	00 00 
    8079:	e9 d0 00             	jmp    814c <detect_memory+0x10d>
		SMAP_entry_t * entry = &smap_entry;
    807c:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8081:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__("int  $0x15"
    8086:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    808c:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8091:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8097:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    809d:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    80a2:	66 89 f7             	mov    %esi,%edi
    80a5:	cd 15                	int    $0x15
    80a7:	66 89 da             	mov    %ebx,%edx
    80aa:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    80af:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    80b4:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
    80b9:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    80c0:	4d 53 
    80c2:	74 13                	je     80d7 <detect_memory+0x98>
            show_msg("failed.\r\n");
    80c4:	66 68 ab 81 00 00    	pushl  $0x81ab
    80ca:	66 e8 33 ff ff ff    	calll  8003 <show_msg>
    80d0:	66 83 c4 04          	add    $0x4,%esp
    80d4:	e9 92 00             	jmp    8169 <detect_memory+0x12a>
			return;
		}

		// todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    80d7:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    80dd:	7e 13                	jle    80f2 <detect_memory+0xb3>
    80df:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80e4:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    80e9:	66 83 e0 01          	and    $0x1,%eax
    80ed:	66 85 c0             	test   %eax,%eax
    80f0:	74 53                	je     8145 <detect_memory+0x106>
			continue;
		}

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {
    80f2:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    80f7:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    80fc:	66 83 f8 01          	cmp    $0x1,%eax
    8100:	75 39                	jne    813b <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8102:	66 a1 30 92          	mov    0x9230,%eax
    8106:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    810b:	67 66 8b 12          	mov    (%edx),%edx
    810f:	67 66 89 14 c5 e0 91 	mov    %edx,0x91e0(,%eax,8)
    8116:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8118:	66 a1 30 92          	mov    0x9230,%eax
    811c:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8121:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8126:	67 66 89 14 c5 e4 91 	mov    %edx,0x91e4(,%eax,8)
    812d:	00 00 
            boot_info.ram_region_count++;
    812f:	66 a1 30 92          	mov    0x9230,%eax
    8133:	66 83 c0 01          	add    $0x1,%eax
    8137:	66 a3 30 92          	mov    %eax,0x9230
        }

		if (contID == 0) {
    813b:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8141:	74 15                	je     8158 <detect_memory+0x119>
    8143:	eb 01                	jmp    8146 <detect_memory+0x107>
			continue;
    8145:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8146:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    814c:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8152:	0f 8e 26 ff          	jle    807c <detect_memory+0x3d>
    8156:	eb 01                	jmp    8159 <detect_memory+0x11a>
			break;
    8158:	90                   	nop
		}
	}
    show_msg("ok.\r\n");
    8159:	66 68 b5 81 00 00    	pushl  $0x81b5
    815f:	66 e8 9e fe ff ff    	calll  8003 <show_msg>
    8165:	66 83 c4 04          	add    $0x4,%esp
}
    8169:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    816e:	66 5b                	pop    %ebx
    8170:	66 5e                	pop    %esi
    8172:	66 5f                	pop    %edi
    8174:	66 5d                	pop    %ebp
    8176:	66 c3                	retl

00008178 <loader_entry>:

void loader_entry(void){
    8178:	66 55                	push   %ebp
    817a:	66 89 e5             	mov    %esp,%ebp
    show_msg("......loading.......\n\r");
    817d:	66 68 bb 81 00 00    	pushl  $0x81bb
    8183:	66 e8 7a fe ff ff    	calll  8003 <show_msg>
    8189:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    818d:	66 e8 ac fe ff ff    	calll  803f <detect_memory>

    
    for(;;){}
    8193:	eb fe                	jmp    8193 <loader_entry+0x1b>
