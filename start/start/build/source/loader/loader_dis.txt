
/Users/hyros/code/OS/mycode/start/start/build/source/loader/loader.elf:     file format elf32-i386
/Users/hyros/code/OS/mycode/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001515 memsz 0x00001515 flags r-x
    LOAD off    0x00001518 vaddr 0x00009518 paddr 0x00009518 align 2**12
         filesz 0x00000018 memsz 0x0000007c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d8  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000003d  000084d8  000084d8  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009518  00009518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009540  00009540  00001530  2**5
                  ALLOC
  4 .comment      00000012  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000005bb  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000002c4  00000000  00000000  00001b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000002c2  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000230  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000002d5  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 0000015b  00000000  00000000  000025f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000017  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003c show_msg
00008143 l     F .text	00000139 detect_memory
0000827c l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008334 l     F .text	0000001d inb
00008351 l     F .text	0000001f inw
00008370 l     F .text	0000001f outb
0000838f l     F .text	00000130 read_disk
0000830e g     F .text	00000026 loader_entry
00009518 g     O .data	00000018 gdt_table
000084bf g     F .text	00000019 load_kernel
00009540 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009530 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009530 g       .data	00000000 _edata
00009594 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 0b 03             	jmp    830e <loader_entry>

00008003 <protect_mode_entry>:
	.code32
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs

	jmp $8, $load_kernel
    8011:	ea bf 84 00 00       	ljmp   $0x0,$0x84bf
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
__asm__(".code16gcc"); //生成16位代码
#include "loader.h"

boot_info_t boot_info;

    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
static void show_msg(const char* msg){
    char c;
    while((c=*msg++)!='\0'){
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
        __asm__ __volatile__(
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
            "mov $0xe, %%ah\n\t"
    803e:	66 c9                	leavel
    8040:	66 c3                	retl

00008042 <outb>:
    }
}

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
static void  detect_memory(void) {
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
	uint32_t contID = 0;
    806a:	90                   	nop
    806b:	66 c9                	leavel
    806d:	66 c3                	retl

0000806f <cli>:
	SMAP_entry_t smap_entry;
	int signature, bytes;

    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    show_msg("try to detect memory:");
    8074:	fa                   	cli

    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl

0000807a <lgdt>:
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
		SMAP_entry_t * entry = &smap_entry;

    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
            show_msg("failed.\r\n");
			return;
		}
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)

    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
		// todo: 20字节
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
			continue;
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
		}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel
    80ae:	66 c3                	retl

000080b0 <read_cr0>:

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
        if (entry->Type == 1) {
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
            boot_info.ram_region_count++;
    80c6:	66 c9                	leavel
    80c8:	66 c3                	retl

000080ca <write_cr0>:
        }

    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
		if (contID == 0) {
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
			break;
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl

000080dc <far_jump>:
		}
	}
    show_msg("ok.\r\n");
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
}
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
// GDT表。临时用，后面内容会替换成自己的
    8102:	90                   	nop
    8103:	66 c9                	leavel
    8105:	66 c3                	retl

00008107 <show_msg>:
static void show_msg(const char* msg){
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    while((c=*msg++)!='\0'){
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
        __asm__ __volatile__(
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while((c=*msg++)!='\0'){
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
}
    813d:	90                   	nop
    813e:	90                   	nop
    813f:	66 c9                	leavel
    8141:	66 c3                	retl

00008143 <detect_memory>:
static void  detect_memory(void) {
    8143:	66 55                	push   %ebp
    8145:	66 89 e5             	mov    %esp,%ebp
    8148:	66 57                	push   %edi
    814a:	66 56                	push   %esi
    814c:	66 53                	push   %ebx
    814e:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    8152:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8159:	00 00 
    show_msg("try to detect memory:");
    815b:	66 68 d8 84 00 00    	pushl  $0x84d8
    8161:	66 e8 a0 ff ff ff    	calll  8107 <show_msg>
    8167:	66 83 c4 04          	add    $0x4,%esp
	boot_info.ram_region_count = 0;
    816b:	66 c7 06 90 95 00 00 	movl   $0x0,-0x6a70
    8172:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8174:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817b:	00 00 
    817d:	e9 d0 00             	jmp    8250 <detect_memory+0x10d>
		SMAP_entry_t * entry = &smap_entry;
    8180:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8185:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
		__asm__ __volatile__("int  $0x15"
    818a:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8190:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8195:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819b:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a1:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a6:	66 89 f7             	mov    %esi,%edi
    81a9:	cd 15                	int    $0x15
    81ab:	66 89 da             	mov    %ebx,%edx
    81ae:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b3:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b8:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
		if (signature != 0x534D4150) {
    81bd:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c4:	4d 53 
    81c6:	74 13                	je     81db <detect_memory+0x98>
            show_msg("failed.\r\n");
    81c8:	66 68 ee 84 00 00    	pushl  $0x84ee
    81ce:	66 e8 33 ff ff ff    	calll  8107 <show_msg>
    81d4:	66 83 c4 04          	add    $0x4,%esp
    81d8:	e9 92 00             	jmp    826d <detect_memory+0x12a>
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81db:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e1:	7e 13                	jle    81f6 <detect_memory+0xb3>
    81e3:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e8:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ed:	66 83 e0 01          	and    $0x1,%eax
    81f1:	66 85 c0             	test   %eax,%eax
    81f4:	74 53                	je     8249 <detect_memory+0x106>
        if (entry->Type == 1) {
    81f6:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fb:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8200:	66 83 f8 01          	cmp    $0x1,%eax
    8204:	75 39                	jne    823f <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8206:	66 a1 90 95          	mov    0x9590,%eax
    820a:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820f:	67 66 8b 12          	mov    (%edx),%edx
    8213:	67 66 89 14 c5 40 95 	mov    %edx,0x9540(,%eax,8)
    821a:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821c:	66 a1 90 95          	mov    0x9590,%eax
    8220:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8225:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    822a:	67 66 89 14 c5 44 95 	mov    %edx,0x9544(,%eax,8)
    8231:	00 00 
            boot_info.ram_region_count++;
    8233:	66 a1 90 95          	mov    0x9590,%eax
    8237:	66 83 c0 01          	add    $0x1,%eax
    823b:	66 a3 90 95          	mov    %eax,0x9590
		if (contID == 0) {
    823f:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8245:	74 15                	je     825c <detect_memory+0x119>
    8247:	eb 01                	jmp    824a <detect_memory+0x107>
			continue;
    8249:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    824a:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8250:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8256:	0f 8e 26 ff          	jle    8180 <detect_memory+0x3d>
    825a:	eb 01                	jmp    825d <detect_memory+0x11a>
			break;
    825c:	90                   	nop
    show_msg("ok.\r\n");
    825d:	66 68 f8 84 00 00    	pushl  $0x84f8
    8263:	66 e8 9e fe ff ff    	calll  8107 <show_msg>
    8269:	66 83 c4 04          	add    $0x4,%esp
}
    826d:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8272:	66 5b                	pop    %ebx
    8274:	66 5e                	pop    %esi
    8276:	66 5f                	pop    %edi
    8278:	66 5d                	pop    %ebp
    827a:	66 c3                	retl

0000827c <enter_protect_mode>:
    {0xFFFF, 0x0000, 0x9A00, 0x00CF},
    {0xFFFF, 0x0000, 0x9200, 0x00CF},
};

//进入保护模式
static void enter_protect_mode(void){
    827c:	66 55                	push   %ebp
    827e:	66 89 e5             	mov    %esp,%ebp
    8281:	66 83 ec 10          	sub    $0x10,%esp
	cli();
    8285:	66 e8 e4 fd ff ff    	calll  806f <cli>

	//开启A20地址线
	uint8_t v = inb(0x92);
    828b:	66 68 92 00 00 00    	pushl  $0x92
    8291:	66 e8 81 fd ff ff    	calll  8018 <inb>
    8297:	66 83 c4 04          	add    $0x4,%esp
    829b:	67 88 45 ff          	mov    %al,-0x1(%ebp)
	outb(0x92, v|0x2);
    829f:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a5:	66 83 c8 02          	or     $0x2,%eax
    82a9:	66 0f b6 c0          	movzbl %al,%eax
    82ad:	66 50                	push   %eax
    82af:	66 68 92 00 00 00    	pushl  $0x92
    82b5:	66 e8 87 fd ff ff    	calll  8042 <outb>
    82bb:	66 83 c4 08          	add    $0x8,%esp
	//加载gdt表
	lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    82bf:	66 b8 18 95 00 00    	mov    $0x9518,%eax
    82c5:	66 6a 18             	pushl  $0x18
    82c8:	66 50                	push   %eax
    82ca:	66 e8 aa fd ff ff    	calll  807a <lgdt>
    82d0:	66 83 c4 08          	add    $0x8,%esp
	//
 	uint32_t cr0=read_cr0();
    82d4:	66 e8 d6 fd ff ff    	calll  80b0 <read_cr0>
    82da:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
	write_cr0(cr0|(1<<0));
    82df:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e4:	66 83 c8 01          	or     $0x1,%eax
    82e8:	66 50                	push   %eax
    82ea:	66 e8 da fd ff ff    	calll  80ca <write_cr0>
    82f0:	66 83 c4 04          	add    $0x4,%esp

	far_jump(8,(uint32_t)protect_mode_entry);
    82f4:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fa:	66 50                	push   %eax
    82fc:	66 6a 08             	pushl  $0x8
    82ff:	66 e8 d7 fd ff ff    	calll  80dc <far_jump>
    8305:	66 83 c4 08          	add    $0x8,%esp
}
    8309:	90                   	nop
    830a:	66 c9                	leavel
    830c:	66 c3                	retl

0000830e <loader_entry>:

void loader_entry(void){
    830e:	66 55                	push   %ebp
    8310:	66 89 e5             	mov    %esp,%ebp
    show_msg("......loading.......\n\r");
    8313:	66 68 fe 84 00 00    	pushl  $0x84fe
    8319:	66 e8 e8 fd ff ff    	calll  8107 <show_msg>
    831f:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8323:	66 e8 1a fe ff ff    	calll  8143 <detect_memory>
    enter_protect_mode();
    8329:	66 e8 4d ff ff ff    	calll  827c <enter_protect_mode>

    832f:	90                   	nop
    8330:	66 c9                	leavel
    8332:	66 c3                	retl

00008334 <inb>:
#include "loader.h"

/**
* 使用LBA48位模式读取磁盘
*/
    8334:	55                   	push   %bp
    8335:	89 e5                	mov    %sp,%bp
    8337:	83 ec 14             	sub    $0x14,%sp
    833a:	8b 45 08             	mov    0x8(%di),%ax
    833d:	66 89 45 ec          	mov    %eax,-0x14(%di)
static void read_disk(int sector, int sector_count, uint8_t * buf) {
    outb(0x1F6, (uint8_t) (0xE0));

    8341:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8345:	89 c2                	mov    %ax,%dx
    8347:	ec                   	in     (%dx),%al
    8348:	88 45 ff             	mov    %al,-0x1(%di)
	outb(0x1F2, (uint8_t) (sector_count >> 8));
    834b:	0f b6 45 ff          	movzbw -0x1(%di),%ax
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    834f:	c9                   	leave
    8350:	c3                   	ret

00008351 <inw>:
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    8351:	55                   	push   %bp
    8352:	89 e5                	mov    %sp,%bp
    8354:	83 ec 14             	sub    $0x14,%sp
    8357:	8b 45 08             	mov    0x8(%di),%ax
    835a:	66 89 45 ec          	mov    %eax,-0x14(%di)

    outb(0x1F2, (uint8_t) (sector_count));
    835e:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8362:	89 c2                	mov    %ax,%dx
    8364:	66 ed                	in     (%dx),%eax
    8366:	66 89 45 fe          	mov    %eax,-0x2(%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    836a:	0f b7 45 fe          	movzww -0x2(%di),%ax
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    836e:	c9                   	leave
    836f:	c3                   	ret

00008370 <outb>:
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位

	outb(0x1F7, (uint8_t) 0x24);
    8370:	55                   	push   %bp
    8371:	89 e5                	mov    %sp,%bp
    8373:	83 ec 08             	sub    $0x8,%sp
    8376:	8b 55 08             	mov    0x8(%di),%dx
    8379:	8b 45 0c             	mov    0xc(%di),%ax
    837c:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8380:	88 45 f8             	mov    %al,-0x8(%di)

    8383:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8387:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838b:	ee                   	out    %al,(%dx)
	// 读取数据
    838c:	90                   	nop
    838d:	c9                   	leave
    838e:	c3                   	ret

0000838f <read_disk>:
static void read_disk(int sector, int sector_count, uint8_t * buf) {
    838f:	55                   	push   %bp
    8390:	89 e5                	mov    %sp,%bp
    8392:	53                   	push   %bx
    8393:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    8396:	68 e0 00             	push   $0xe0
    8399:	00 00                	add    %al,(%bx,%si)
    839b:	68 f6 01             	push   $0x1f6
    839e:	00 00                	add    %al,(%bx,%si)
    83a0:	e8 cb ff             	call   836e <inw+0x1d>
    83a3:	ff                   	(bad)
    83a4:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F2, (uint8_t) (sector_count >> 8));
    83a8:	8b 45 0c             	mov    0xc(%di),%ax
    83ab:	c1 f8 08             	sar    $0x8,%ax
    83ae:	0f b6 c0             	movzbw %al,%ax
    83b1:	50                   	push   %ax
    83b2:	68 f2 01             	push   $0x1f2
    83b5:	00 00                	add    %al,(%bx,%si)
    83b7:	e8 b4 ff             	call   836e <inw+0x1d>
    83ba:	ff                   	(bad)
    83bb:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    83bf:	8b 45 08             	mov    0x8(%di),%ax
    83c2:	c1 f8 18             	sar    $0x18,%ax
    83c5:	0f b6 c0             	movzbw %al,%ax
    83c8:	50                   	push   %ax
    83c9:	68 f3 01             	push   $0x1f3
    83cc:	00 00                	add    %al,(%bx,%si)
    83ce:	e8 9d ff             	call   836e <inw+0x1d>
    83d1:	ff                   	(bad)
    83d2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    83d6:	6a 00                	push   $0x0
    83d8:	68 f4 01             	push   $0x1f4
    83db:	00 00                	add    %al,(%bx,%si)
    83dd:	e8 8e ff             	call   836e <inw+0x1d>
    83e0:	ff                   	(bad)
    83e1:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    83e5:	6a 00                	push   $0x0
    83e7:	68 f5 01             	push   $0x1f5
    83ea:	00 00                	add    %al,(%bx,%si)
    83ec:	e8 7f ff             	call   836e <inw+0x1d>
    83ef:	ff                   	(bad)
    83f0:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F2, (uint8_t) (sector_count));
    83f4:	8b 45 0c             	mov    0xc(%di),%ax
    83f7:	0f b6 c0             	movzbw %al,%ax
    83fa:	50                   	push   %ax
    83fb:	68 f2 01             	push   $0x1f2
    83fe:	00 00                	add    %al,(%bx,%si)
    8400:	e8 6b ff             	call   836e <inw+0x1d>
    8403:	ff                   	(bad)
    8404:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    8408:	8b 45 08             	mov    0x8(%di),%ax
    840b:	0f b6 c0             	movzbw %al,%ax
    840e:	50                   	push   %ax
    840f:	68 f3 01             	push   $0x1f3
    8412:	00 00                	add    %al,(%bx,%si)
    8414:	e8 57 ff             	call   836e <inw+0x1d>
    8417:	ff                   	(bad)
    8418:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    841c:	8b 45 08             	mov    0x8(%di),%ax
    841f:	c1 f8 08             	sar    $0x8,%ax
    8422:	0f b6 c0             	movzbw %al,%ax
    8425:	50                   	push   %ax
    8426:	68 f4 01             	push   $0x1f4
    8429:	00 00                	add    %al,(%bx,%si)
    842b:	e8 40 ff             	call   836e <inw+0x1d>
    842e:	ff                   	(bad)
    842f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    8433:	8b 45 08             	mov    0x8(%di),%ax
    8436:	c1 f8 10             	sar    $0x10,%ax
    8439:	0f b6 c0             	movzbw %al,%ax
    843c:	50                   	push   %ax
    843d:	68 f5 01             	push   $0x1f5
    8440:	00 00                	add    %al,(%bx,%si)
    8442:	e8 29 ff             	call   836e <inw+0x1d>
    8445:	ff                   	(bad)
    8446:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F7, (uint8_t) 0x24);
    844a:	6a 24                	push   $0x24
    844c:	68 f7 01             	push   $0x1f7
    844f:	00 00                	add    %al,(%bx,%si)
    8451:	e8 1a ff             	call   836e <inw+0x1d>
    8454:	ff                   	(bad)
    8455:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	uint16_t *data_buf = (uint16_t*) buf;
    8459:	8b 45 10             	mov    0x10(%di),%ax
    845c:	89 45 f8             	mov    %ax,-0x8(%di)
	while (sector_count-- > 0) {
    845f:	eb 4a                	jmp    84ab <read_disk+0x11c>
		// 每次扇区读之前都要检查，等待数据就绪
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    8461:	90                   	nop
    8462:	68 f7 01             	push   $0x1f7
    8465:	00 00                	add    %al,(%bx,%si)
    8467:	e8 c8 fe             	call   8332 <loader_entry+0x24>
    846a:	ff                   	(bad)
    846b:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    846f:	0f b6 c0             	movzbw %al,%ax
    8472:	25 88 00             	and    $0x88,%ax
    8475:	00 00                	add    %al,(%bx,%si)
    8477:	83 f8 08             	cmp    $0x8,%ax
    847a:	75 e6                	jne    8462 <read_disk+0xd3>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    847c:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8481:	00 00                	add    %al,(%bx,%si)
    8483:	eb 1d                	jmp    84a2 <read_disk+0x113>
			*data_buf++ = inw(0x1F0);
    8485:	8b 5d f8             	mov    -0x8(%di),%bx
    8488:	8d 43 02             	lea    0x2(%bp,%di),%ax
    848b:	89 45 f8             	mov    %ax,-0x8(%di)
    848e:	68 f0 01             	push   $0x1f0
    8491:	00 00                	add    %al,(%bx,%si)
    8493:	e8 b9 fe             	call   834f <inb+0x1b>
    8496:	ff                   	(bad)
    8497:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    849b:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    849e:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84a2:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84a7:	00 00                	add    %al,(%bx,%si)
    84a9:	7e da                	jle    8485 <read_disk+0xf6>
	while (sector_count-- > 0) {
    84ab:	8b 45 0c             	mov    0xc(%di),%ax
    84ae:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84b1:	89 55 0c             	mov    %dx,0xc(%di)
    84b4:	85 c0                	test   %ax,%ax
    84b6:	7f a9                	jg     8461 <read_disk+0xd2>
		}
	}
}
    84b8:	90                   	nop
    84b9:	90                   	nop
    84ba:	8b 5d fc             	mov    -0x4(%di),%bx
    84bd:	c9                   	leave
    84be:	c3                   	ret

000084bf <load_kernel>:

void load_kernel(void){
    84bf:	55                   	push   %bp
    84c0:	89 e5                	mov    %sp,%bp
    //将内核放在loader后面
    read_disk(100,500,(uint8_t *)SYS_KERNEL_LOAD_ADDR);
    84c2:	68 00 00             	push   $0x0
    84c5:	10 00                	adc    %al,(%bx,%si)
    84c7:	68 f4 01             	push   $0x1f4
    84ca:	00 00                	add    %al,(%bx,%si)
    84cc:	6a 64                	push   $0x64
    84ce:	e8 bc fe             	call   838d <outb+0x1d>
    84d1:	ff                   	(bad)
    84d2:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

    for(;;){}
    84d6:	eb fe                	jmp    84d6 <load_kernel+0x17>
