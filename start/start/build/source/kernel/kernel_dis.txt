
/Users/hyros/code/OS/mycode/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/Users/hyros/code/OS/mycode/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000228 memsz 0x00002e50 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000222  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002c10  00010240  00010240  00001228  2**5
                  ALLOC
  3 .debug_line   0000025e  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_line_str 0000021d  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   0000056d  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 0000033a  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000080  00000000  00000000  00001f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000296  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      00000012  00000000  00000000  00002266  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000154  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.obj
00010011 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
00010029 l     F .text	00000028 lgdt
00010240 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010196 l     F .text	00000028 lidt
00010a40 l     O .bss	00000400 idt_table
00000000 l    df *ABS*	00000000 init.c
00010e40 l     O .bss	00000004 i
00010224 l     O .data	00000004 x
0001018b g     F .text	0000000b cpu_init
0001021d g     F .text	00000005 init_main
00010e50 g     O .bss	00002000 stack
0001020a g     F .text	00000013 kernel_init
00010000 g       .text	00000000 _start
0001011e g     F .text	0000006d init_gdt
000101be g     F .text	0000004c irq_init
00010051 g     F .text	00000086 segment_desc_set
000100d7 g     F .text	00000047 gate_desc_set



Disassembly of section .text:

00010000 <_start>:
	.extern kernel_init
	.global _start
	.extern init_main
_start:
	# void start (boot_info_t * boot_info)	
	mov 4(%esp), %eax
   10000:	8b 44 24 04          	mov    0x4(%esp),%eax

	# void kernel_init(boot_info_t boot_info)
	push %eax
   10004:	50                   	push   %eax
	call kernel_init
   10005:	e8 00 02 00 00       	call   1020a <kernel_init>

	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000a:	ea 11 00 01 00 08 00 	ljmp   $0x8,$0x10011

00010011 <gdt_reload>:

gdt_reload:
	//
	mov $KERNEL_SELECTOR_DS, %ax
   10011:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10015:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10017:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs

	// 设置一段全新栈
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001f:	bc 50 2e 01 00       	mov    $0x12e50,%esp
	jmp init_main
   10024:	e9 f4 01 00 00       	jmp    1021d <init_main>

00010029 <lgdt>:
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
	desc->offset15_0 = offset & 0xffff;
	desc->selector = selector;
	desc->attr = attr;
	desc->offset31_16 = (offset >> 16) & 0xffff;
}
   10029:	55                   	push   %ebp
   1002a:	89 e5                	mov    %esp,%ebp
   1002c:	83 ec 10             	sub    $0x10,%esp


void init_gdt(void) {
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
        segment_desc_set(i << 3, 0, 0, 0);
   1002f:	8b 45 08             	mov    0x8(%ebp),%eax
   10032:	c1 e8 10             	shr    $0x10,%eax
   10035:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    }
   10039:	8b 45 08             	mov    0x8(%ebp),%eax
   1003c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)

   10040:	8b 45 0c             	mov    0xc(%ebp),%eax
   10043:	83 e8 01             	sub    $0x1,%eax
   10046:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	
//数据段
   1004a:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1004e:	90                   	nop
   1004f:	c9                   	leave
   10050:	c3                   	ret

00010051 <segment_desc_set>:
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10051:	55                   	push   %ebp
   10052:	89 e5                	mov    %esp,%ebp
   10054:	83 ec 14             	sub    $0x14,%esp
   10057:	8b 45 14             	mov    0x14(%ebp),%eax
   1005a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1005e:	8b 45 08             	mov    0x8(%ebp),%eax
   10061:	c1 f8 03             	sar    $0x3,%eax
   10064:	c1 e0 03             	shl    $0x3,%eax
   10067:	05 40 02 01 00       	add    $0x10240,%eax
   1006c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (limit > 0xfffff) {
   1006f:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10076:	76 0f                	jbe    10087 <segment_desc_set+0x36>
		attr |= SEG_G;
   10078:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1007e:	8b 45 10             	mov    0x10(%ebp),%eax
   10081:	c1 e8 0c             	shr    $0xc,%eax
   10084:	89 45 10             	mov    %eax,0x10(%ebp)
	desc->limit15_0 = limit & 0xffff;
   10087:	8b 45 10             	mov    0x10(%ebp),%eax
   1008a:	89 c2                	mov    %eax,%edx
   1008c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1008f:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10092:	8b 45 0c             	mov    0xc(%ebp),%eax
   10095:	89 c2                	mov    %eax,%edx
   10097:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1009a:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1009e:	8b 45 0c             	mov    0xc(%ebp),%eax
   100a1:	c1 e8 10             	shr    $0x10,%eax
   100a4:	89 c2                	mov    %eax,%edx
   100a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100a9:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   100ac:	8b 45 10             	mov    0x10(%ebp),%eax
   100af:	c1 e8 10             	shr    $0x10,%eax
   100b2:	c1 e0 08             	shl    $0x8,%eax
   100b5:	66 25 00 0f          	and    $0xf00,%ax
   100b9:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   100bd:	89 c2                	mov    %eax,%edx
   100bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100c2:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   100c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   100c9:	c1 e8 18             	shr    $0x18,%eax
   100cc:	89 c2                	mov    %eax,%edx
   100ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100d1:	88 50 07             	mov    %dl,0x7(%eax)
}
   100d4:	90                   	nop
   100d5:	c9                   	leave
   100d6:	c3                   	ret

000100d7 <gate_desc_set>:
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   100d7:	55                   	push   %ebp
   100d8:	89 e5                	mov    %esp,%ebp
   100da:	83 ec 08             	sub    $0x8,%esp
   100dd:	8b 55 0c             	mov    0xc(%ebp),%edx
   100e0:	8b 45 14             	mov    0x14(%ebp),%eax
   100e3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   100e7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   100eb:	8b 45 10             	mov    0x10(%ebp),%eax
   100ee:	89 c2                	mov    %eax,%edx
   100f0:	8b 45 08             	mov    0x8(%ebp),%eax
   100f3:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   100f6:	8b 45 08             	mov    0x8(%ebp),%eax
   100f9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   100fd:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10101:	8b 45 08             	mov    0x8(%ebp),%eax
   10104:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10108:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   1010c:	8b 45 10             	mov    0x10(%ebp),%eax
   1010f:	c1 e8 10             	shr    $0x10,%eax
   10112:	89 c2                	mov    %eax,%edx
   10114:	8b 45 08             	mov    0x8(%ebp),%eax
   10117:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1011b:	90                   	nop
   1011c:	c9                   	leave
   1011d:	c3                   	ret

0001011e <init_gdt>:
void init_gdt(void) {
   1011e:	55                   	push   %ebp
   1011f:	89 e5                	mov    %esp,%ebp
   10121:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10124:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1012b:	eb 19                	jmp    10146 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   1012d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10130:	c1 e0 03             	shl    $0x3,%eax
   10133:	6a 00                	push   $0x0
   10135:	6a 00                	push   $0x0
   10137:	6a 00                	push   $0x0
   10139:	50                   	push   %eax
   1013a:	e8 12 ff ff ff       	call   10051 <segment_desc_set>
   1013f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10142:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10146:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1014d:	7e de                	jle    1012d <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   1014f:	68 92 c0 00 00       	push   $0xc092
   10154:	6a ff                	push   $0xffffffff
   10156:	6a 00                	push   $0x0
   10158:	6a 10                	push   $0x10
   1015a:	e8 f2 fe ff ff       	call   10051 <segment_desc_set>
   1015f:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10162:	68 9a c0 00 00       	push   $0xc09a
   10167:	6a ff                	push   $0xffffffff
   10169:	6a 00                	push   $0x0
   1016b:	6a 08                	push   $0x8
   1016d:	e8 df fe ff ff       	call   10051 <segment_desc_set>
   10172:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);

	lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   10175:	b8 40 02 01 00       	mov    $0x10240,%eax
   1017a:	68 00 08 00 00       	push   $0x800
   1017f:	50                   	push   %eax
   10180:	e8 a4 fe ff ff       	call   10029 <lgdt>
   10185:	83 c4 08             	add    $0x8,%esp
}
   10188:	90                   	nop
   10189:	c9                   	leave
   1018a:	c3                   	ret

0001018b <cpu_init>:

void cpu_init(void){
   1018b:	55                   	push   %ebp
   1018c:	89 e5                	mov    %esp,%ebp
    init_gdt();
   1018e:	e8 8b ff ff ff       	call   1011e <init_gdt>
   10193:	90                   	nop
   10194:	5d                   	pop    %ebp
   10195:	c3                   	ret

00010196 <lidt>:
   10196:	55                   	push   %ebp
   10197:	89 e5                	mov    %esp,%ebp
   10199:	83 ec 10             	sub    $0x10,%esp
   1019c:	8b 45 08             	mov    0x8(%ebp),%eax
   1019f:	c1 e8 10             	shr    $0x10,%eax
   101a2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   101a6:	8b 45 08             	mov    0x8(%ebp),%eax
   101a9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   101ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   101b0:	83 e8 01             	sub    $0x1,%eax
   101b3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   101b7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
   101bb:	90                   	nop
   101bc:	c9                   	leave
   101bd:	c3                   	ret

000101be <irq_init>:
void irq_init(void){
   101be:	55                   	push   %ebp
   101bf:	89 e5                	mov    %esp,%ebp
   101c1:	83 ec 18             	sub    $0x18,%esp
    for(int i=0;i<IDT_TABLE_NR;i++){
   101c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   101cb:	eb 1e                	jmp    101eb <irq_init+0x2d>
        gate_desc_set(idt_table+i,0,0,0);
   101cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   101d0:	c1 e0 03             	shl    $0x3,%eax
   101d3:	05 40 0a 01 00       	add    $0x10a40,%eax
   101d8:	6a 00                	push   $0x0
   101da:	6a 00                	push   $0x0
   101dc:	6a 00                	push   $0x0
   101de:	50                   	push   %eax
   101df:	e8 f3 fe ff ff       	call   100d7 <gate_desc_set>
   101e4:	83 c4 10             	add    $0x10,%esp
    for(int i=0;i<IDT_TABLE_NR;i++){
   101e7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   101eb:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   101ef:	7e dc                	jle    101cd <irq_init+0xf>
    lidt((uint32_t)idt_table,sizeof(idt_table));
   101f1:	b8 40 0a 01 00       	mov    $0x10a40,%eax
   101f6:	83 ec 08             	sub    $0x8,%esp
   101f9:	68 00 04 00 00       	push   $0x400
   101fe:	50                   	push   %eax
   101ff:	e8 92 ff ff ff       	call   10196 <lidt>
   10204:	83 c4 10             	add    $0x10,%esp
   10207:	90                   	nop
   10208:	c9                   	leave
   10209:	c3                   	ret

0001020a <kernel_init>:
#include "cpu/irq.h"

static int i;
static int x=1;

void kernel_init(boot_info_t boot_info){
   1020a:	55                   	push   %ebp
   1020b:	89 e5                	mov    %esp,%ebp
   1020d:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10210:	e8 76 ff ff ff       	call   1018b <cpu_init>
    irq_init();
   10215:	e8 a4 ff ff ff       	call   101be <irq_init>
}
   1021a:	90                   	nop
   1021b:	c9                   	leave
   1021c:	c3                   	ret

0001021d <init_main>:


void init_main(void){
   1021d:	55                   	push   %ebp
   1021e:	89 e5                	mov    %esp,%ebp
    for(;;){}
   10220:	eb fe                	jmp    10220 <init_main+0x3>
