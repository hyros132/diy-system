
/Users/hyros/code/OS/mycode/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/Users/hyros/code/OS/mycode/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001a24 memsz 0x00005770 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001677  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000003a8  00011678  00011678  00002678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011a20  00011a20  00002a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d30  00011a40  00011a40  00002a24  2**5
                  ALLOC
  4 .debug_line   00000b8d  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000510  00000000  00000000  000035b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00001c8b  00000000  00000000  00003ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000a1b  00000000  00000000  0000574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000100  00000000  00000000  00006168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a63  00000000  00000000  00006268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      00000012  00000000  00000000  00006ccb  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000984  00000000  00000000  00006ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.obj
00010011 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102c3 l     F .text	000000ea tss_init
000116e4 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
0001040c l     F .text	00000028 lgdt
00010434 l     F .text	0000001a far_jump
00011a40 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000105eb l     F .text	0000001d inb
00010608 l     F .text	0000001f outb
00010627 l     F .text	00000007 cli
0001062e l     F .text	00000007 sti
00010635 l     F .text	00000028 lidt
0001065d l     F .text	00000007 hlt
00012240 l     O .bss	00000400 idt_table
00010664 l     F .text	000000d9 dump_core_regs
0001073d l     F .text	0000004e do_default_handler
00010a02 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010db7 l     F .text	0000001f outb
00012640 l     O .bss	00000004 sys_tick
00010e09 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00010e81 l     F .text	0000000c write_tr
00012660 l     O .bss	00000004 init_boot_info
00012680 l     O .bss	0000006a first_task
00012700 l     O .bss	00001000 init_task_stack
00013700 l     O .bss	0000006a init_task
00000000 l    df *ABS*	00000000 klib.c
00010fc1 l     F .text	00000007 hlt
00011a20 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 log.c
00011508 l     F .text	0000001d inb
00011525 l     F .text	0000001f outb
00011134 g     F .text	0000004f kernel_memcpy
00010dac g     F .text	0000000b irq_enable_global
000108bf g     F .text	0000001c do_handler_segment_not_present
00011183 g     F .text	00000041 kernel_memset
00010268 g       .text	00000000 exception_handler_virtual_exception
000105e0 g     F .text	0000000b cpu_init
00011544 g     F .text	00000075 log_init
00010ef0 g     F .text	000000d1 init_main
0001020d g       .text	00000000 exception_handler_alignment_check
00010fc8 g     F .text	00000047 kernel_strcpy
00010c8f g     F .text	0000008b irq_enable
00010029 g       .text	00000000 exception_handler_unknown
000100a5 g       .text	00000000 exception_handler_breakpoint
00010817 g     F .text	0000001c do_handler_overflow
0001094b g     F .text	0000001c do_handler_alignment_check
000101b4 g       .text	00000000 exception_handler_general_protection
000108f7 g     F .text	0000001c do_handler_general_protection
000109bb g     F .text	0000001c do_handler_control_exception
000107a7 g     F .text	0000001c do_handler_divider
00010887 g     F .text	0000001c do_handler_double_fault
00010eb2 g     F .text	0000003e init_task_entry
00010913 g     F .text	0000001c do_handler_page_fault
00010140 g       .text	00000000 exception_handler_double_fault
000109d7 g     F .text	0000002b pic_send_eoi
00010dd6 g     F .text	00000033 do_handler_timer
00010197 g       .text	00000000 exception_handler_stack_segment_fault
0001099f g     F .text	0000001c do_handler_virtual_exception
000100c4 g       .text	00000000 exception_handler_overflow
00013770 g     O .bss	00002000 stack
00010287 g       .text	00000000 exception_handler_control_exception
000100e3 g       .text	00000000 exception_handler_bound_range
0001084f g     F .text	0000001c do_handler_invalid_opcode
0001015d g       .text	00000000 exception_handler_invalid_tss
0001092f g     F .text	0000001c do_handler_fpu_error
00010967 g     F .text	0000001c do_handler_machine_check
000107c3 g     F .text	0000001c do_handler_Debug
000107df g     F .text	0000001c do_handler_NMI
00010048 g       .text	00000000 exception_handler_divider
0001100f g     F .text	00000070 kernel_strncpy
00010da1 g     F .text	0000000b irq_disable_global
00010e8d g     F .text	00000025 kernel_init
00010000 g       .text	00000000 _start
00011386 g     F .text	0000014c kernel_vsprintf
00010121 g       .text	00000000 exception_handler_device_unavailable
00010102 g       .text	00000000 exception_handler_invalid_opcode
0001022a g       .text	00000000 exception_handler_machine_check
000108a3 g     F .text	0000001c do_handler_invalid_tss
000114d2 g     F .text	00000036 panic
000102a4 g       .text	00000000 exception_handler_timer
00010a95 g     F .text	0000003a irq_install
00010573 g     F .text	0000006d init_gdt
00010d1a g     F .text	00000087 irq_disable
00010249 g       .text	00000000 exception_handler_smd_exception
0001086b g     F .text	0000001c do_handler_device_unavailable
00010560 g     F .text	00000013 switch_to_tss
000111c4 g     F .text	0000005e kernel_memcmp
00010983 g     F .text	0000001c do_handler_smd_exception
000101d1 g       .text	00000000 exception_handler_page_fault
0001078b g     F .text	0000001c do_handler_unknown
000101ee g       .text	00000000 exception_handler_fpu_error
000103ed g     F .text	0000001f task_switch_from_to
00010acf g     F .text	000001c0 irq_init
0001107f g     F .text	0000003b kernel_strlen
0001044e g     F .text	00000086 segment_desc_set
00010833 g     F .text	0000001c do_handler_bound_range
000110ba g     F .text	0000007a kernel_strncmp
0001017a g       .text	00000000 exception_handler_segment_not_present
00010086 g       .text	00000000 exception_handler_NMI
00010067 g       .text	00000000 exception_handler_Debug
000108db g     F .text	0000001c do_handler_stack_segment_fault
000107fb g     F .text	0000001c do_handler_breakpoint
000115b9 g     F .text	000000be log_printf
000103ad g     F .text	00000040 task_init
00011362 g     F .text	00000024 kernel_sprintf
0001051b g     F .text	00000045 gdt_alloc_desc
00011222 g     F .text	00000140 kernel_itoa
000104d4 g     F .text	00000047 gate_desc_set
00010e69 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
	.extern kernel_init
	.global _start
	.extern init_main
_start:
	# void start (boot_info_t * boot_info)	
	mov 4(%esp), %eax
   10000:	8b 44 24 04          	mov    0x4(%esp),%eax

	# void kernel_init(boot_info_t boot_info)
	push %eax
   10004:	50                   	push   %eax
	call kernel_init
   10005:	e8 83 0e 00 00       	call   10e8d <kernel_init>

	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000a:	ea 11 00 01 00 08 00 	ljmp   $0x8,$0x10011

00010011 <gdt_reload>:

gdt_reload:
	//
	mov $KERNEL_SELECTOR_DS, %ax
   10011:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10015:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10017:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10019:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001b:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001d:	8e e8                	mov    %eax,%gs

	// 设置一段全新栈
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001f:	bc 70 57 01 00       	mov    $0x15770,%esp
	jmp init_main
   10024:	e9 c7 0e 00 00       	jmp    10ef0 <init_main>

00010029 <exception_handler_unknown>:
	// 跳过压入的异常号和错误码
	add $(2*4), %esp
	iret
.endm

exception_handler unknown, -1, 0
   10029:	6a 00                	push   $0x0
   1002b:	6a ff                	push   $0xffffffff
   1002d:	60                   	pusha
   1002e:	1e                   	push   %ds
   1002f:	06                   	push   %es
   10030:	0f a0                	push   %fs
   10032:	0f a8                	push   %gs
   10034:	54                   	push   %esp
   10035:	e8 51 07 00 00       	call   1078b <do_handler_unknown>
   1003a:	83 c4 04             	add    $0x4,%esp
   1003d:	0f a9                	pop    %gs
   1003f:	0f a1                	pop    %fs
   10041:	07                   	pop    %es
   10042:	1f                   	pop    %ds
   10043:	61                   	popa
   10044:	83 c4 08             	add    $0x8,%esp
   10047:	cf                   	iret

00010048 <exception_handler_divider>:
exception_handler divider, 0, 0
   10048:	6a 00                	push   $0x0
   1004a:	6a 00                	push   $0x0
   1004c:	60                   	pusha
   1004d:	1e                   	push   %ds
   1004e:	06                   	push   %es
   1004f:	0f a0                	push   %fs
   10051:	0f a8                	push   %gs
   10053:	54                   	push   %esp
   10054:	e8 4e 07 00 00       	call   107a7 <do_handler_divider>
   10059:	83 c4 04             	add    $0x4,%esp
   1005c:	0f a9                	pop    %gs
   1005e:	0f a1                	pop    %fs
   10060:	07                   	pop    %es
   10061:	1f                   	pop    %ds
   10062:	61                   	popa
   10063:	83 c4 08             	add    $0x8,%esp
   10066:	cf                   	iret

00010067 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10067:	6a 00                	push   $0x0
   10069:	6a 01                	push   $0x1
   1006b:	60                   	pusha
   1006c:	1e                   	push   %ds
   1006d:	06                   	push   %es
   1006e:	0f a0                	push   %fs
   10070:	0f a8                	push   %gs
   10072:	54                   	push   %esp
   10073:	e8 4b 07 00 00       	call   107c3 <do_handler_Debug>
   10078:	83 c4 04             	add    $0x4,%esp
   1007b:	0f a9                	pop    %gs
   1007d:	0f a1                	pop    %fs
   1007f:	07                   	pop    %es
   10080:	1f                   	pop    %ds
   10081:	61                   	popa
   10082:	83 c4 08             	add    $0x8,%esp
   10085:	cf                   	iret

00010086 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10086:	6a 00                	push   $0x0
   10088:	6a 02                	push   $0x2
   1008a:	60                   	pusha
   1008b:	1e                   	push   %ds
   1008c:	06                   	push   %es
   1008d:	0f a0                	push   %fs
   1008f:	0f a8                	push   %gs
   10091:	54                   	push   %esp
   10092:	e8 48 07 00 00       	call   107df <do_handler_NMI>
   10097:	83 c4 04             	add    $0x4,%esp
   1009a:	0f a9                	pop    %gs
   1009c:	0f a1                	pop    %fs
   1009e:	07                   	pop    %es
   1009f:	1f                   	pop    %ds
   100a0:	61                   	popa
   100a1:	83 c4 08             	add    $0x8,%esp
   100a4:	cf                   	iret

000100a5 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a5:	6a 00                	push   $0x0
   100a7:	6a 03                	push   $0x3
   100a9:	60                   	pusha
   100aa:	1e                   	push   %ds
   100ab:	06                   	push   %es
   100ac:	0f a0                	push   %fs
   100ae:	0f a8                	push   %gs
   100b0:	54                   	push   %esp
   100b1:	e8 45 07 00 00       	call   107fb <do_handler_breakpoint>
   100b6:	83 c4 04             	add    $0x4,%esp
   100b9:	0f a9                	pop    %gs
   100bb:	0f a1                	pop    %fs
   100bd:	07                   	pop    %es
   100be:	1f                   	pop    %ds
   100bf:	61                   	popa
   100c0:	83 c4 08             	add    $0x8,%esp
   100c3:	cf                   	iret

000100c4 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c4:	6a 00                	push   $0x0
   100c6:	6a 04                	push   $0x4
   100c8:	60                   	pusha
   100c9:	1e                   	push   %ds
   100ca:	06                   	push   %es
   100cb:	0f a0                	push   %fs
   100cd:	0f a8                	push   %gs
   100cf:	54                   	push   %esp
   100d0:	e8 42 07 00 00       	call   10817 <do_handler_overflow>
   100d5:	83 c4 04             	add    $0x4,%esp
   100d8:	0f a9                	pop    %gs
   100da:	0f a1                	pop    %fs
   100dc:	07                   	pop    %es
   100dd:	1f                   	pop    %ds
   100de:	61                   	popa
   100df:	83 c4 08             	add    $0x8,%esp
   100e2:	cf                   	iret

000100e3 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e3:	6a 00                	push   $0x0
   100e5:	6a 05                	push   $0x5
   100e7:	60                   	pusha
   100e8:	1e                   	push   %ds
   100e9:	06                   	push   %es
   100ea:	0f a0                	push   %fs
   100ec:	0f a8                	push   %gs
   100ee:	54                   	push   %esp
   100ef:	e8 3f 07 00 00       	call   10833 <do_handler_bound_range>
   100f4:	83 c4 04             	add    $0x4,%esp
   100f7:	0f a9                	pop    %gs
   100f9:	0f a1                	pop    %fs
   100fb:	07                   	pop    %es
   100fc:	1f                   	pop    %ds
   100fd:	61                   	popa
   100fe:	83 c4 08             	add    $0x8,%esp
   10101:	cf                   	iret

00010102 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10102:	6a 00                	push   $0x0
   10104:	6a 06                	push   $0x6
   10106:	60                   	pusha
   10107:	1e                   	push   %ds
   10108:	06                   	push   %es
   10109:	0f a0                	push   %fs
   1010b:	0f a8                	push   %gs
   1010d:	54                   	push   %esp
   1010e:	e8 3c 07 00 00       	call   1084f <do_handler_invalid_opcode>
   10113:	83 c4 04             	add    $0x4,%esp
   10116:	0f a9                	pop    %gs
   10118:	0f a1                	pop    %fs
   1011a:	07                   	pop    %es
   1011b:	1f                   	pop    %ds
   1011c:	61                   	popa
   1011d:	83 c4 08             	add    $0x8,%esp
   10120:	cf                   	iret

00010121 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10121:	6a 00                	push   $0x0
   10123:	6a 07                	push   $0x7
   10125:	60                   	pusha
   10126:	1e                   	push   %ds
   10127:	06                   	push   %es
   10128:	0f a0                	push   %fs
   1012a:	0f a8                	push   %gs
   1012c:	54                   	push   %esp
   1012d:	e8 39 07 00 00       	call   1086b <do_handler_device_unavailable>
   10132:	83 c4 04             	add    $0x4,%esp
   10135:	0f a9                	pop    %gs
   10137:	0f a1                	pop    %fs
   10139:	07                   	pop    %es
   1013a:	1f                   	pop    %ds
   1013b:	61                   	popa
   1013c:	83 c4 08             	add    $0x8,%esp
   1013f:	cf                   	iret

00010140 <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   10140:	6a 08                	push   $0x8
   10142:	60                   	pusha
   10143:	1e                   	push   %ds
   10144:	06                   	push   %es
   10145:	0f a0                	push   %fs
   10147:	0f a8                	push   %gs
   10149:	54                   	push   %esp
   1014a:	e8 38 07 00 00       	call   10887 <do_handler_double_fault>
   1014f:	83 c4 04             	add    $0x4,%esp
   10152:	0f a9                	pop    %gs
   10154:	0f a1                	pop    %fs
   10156:	07                   	pop    %es
   10157:	1f                   	pop    %ds
   10158:	61                   	popa
   10159:	83 c4 08             	add    $0x8,%esp
   1015c:	cf                   	iret

0001015d <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015d:	6a 0a                	push   $0xa
   1015f:	60                   	pusha
   10160:	1e                   	push   %ds
   10161:	06                   	push   %es
   10162:	0f a0                	push   %fs
   10164:	0f a8                	push   %gs
   10166:	54                   	push   %esp
   10167:	e8 37 07 00 00       	call   108a3 <do_handler_invalid_tss>
   1016c:	83 c4 04             	add    $0x4,%esp
   1016f:	0f a9                	pop    %gs
   10171:	0f a1                	pop    %fs
   10173:	07                   	pop    %es
   10174:	1f                   	pop    %ds
   10175:	61                   	popa
   10176:	83 c4 08             	add    $0x8,%esp
   10179:	cf                   	iret

0001017a <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   1017a:	6a 0b                	push   $0xb
   1017c:	60                   	pusha
   1017d:	1e                   	push   %ds
   1017e:	06                   	push   %es
   1017f:	0f a0                	push   %fs
   10181:	0f a8                	push   %gs
   10183:	54                   	push   %esp
   10184:	e8 36 07 00 00       	call   108bf <do_handler_segment_not_present>
   10189:	83 c4 04             	add    $0x4,%esp
   1018c:	0f a9                	pop    %gs
   1018e:	0f a1                	pop    %fs
   10190:	07                   	pop    %es
   10191:	1f                   	pop    %ds
   10192:	61                   	popa
   10193:	83 c4 08             	add    $0x8,%esp
   10196:	cf                   	iret

00010197 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10197:	6a 0c                	push   $0xc
   10199:	60                   	pusha
   1019a:	1e                   	push   %ds
   1019b:	06                   	push   %es
   1019c:	0f a0                	push   %fs
   1019e:	0f a8                	push   %gs
   101a0:	54                   	push   %esp
   101a1:	e8 35 07 00 00       	call   108db <do_handler_stack_segment_fault>
   101a6:	83 c4 04             	add    $0x4,%esp
   101a9:	0f a9                	pop    %gs
   101ab:	0f a1                	pop    %fs
   101ad:	07                   	pop    %es
   101ae:	1f                   	pop    %ds
   101af:	61                   	popa
   101b0:	83 c4 08             	add    $0x8,%esp
   101b3:	cf                   	iret

000101b4 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b4:	6a 0d                	push   $0xd
   101b6:	60                   	pusha
   101b7:	1e                   	push   %ds
   101b8:	06                   	push   %es
   101b9:	0f a0                	push   %fs
   101bb:	0f a8                	push   %gs
   101bd:	54                   	push   %esp
   101be:	e8 34 07 00 00       	call   108f7 <do_handler_general_protection>
   101c3:	83 c4 04             	add    $0x4,%esp
   101c6:	0f a9                	pop    %gs
   101c8:	0f a1                	pop    %fs
   101ca:	07                   	pop    %es
   101cb:	1f                   	pop    %ds
   101cc:	61                   	popa
   101cd:	83 c4 08             	add    $0x8,%esp
   101d0:	cf                   	iret

000101d1 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d1:	6a 0e                	push   $0xe
   101d3:	60                   	pusha
   101d4:	1e                   	push   %ds
   101d5:	06                   	push   %es
   101d6:	0f a0                	push   %fs
   101d8:	0f a8                	push   %gs
   101da:	54                   	push   %esp
   101db:	e8 33 07 00 00       	call   10913 <do_handler_page_fault>
   101e0:	83 c4 04             	add    $0x4,%esp
   101e3:	0f a9                	pop    %gs
   101e5:	0f a1                	pop    %fs
   101e7:	07                   	pop    %es
   101e8:	1f                   	pop    %ds
   101e9:	61                   	popa
   101ea:	83 c4 08             	add    $0x8,%esp
   101ed:	cf                   	iret

000101ee <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ee:	6a 00                	push   $0x0
   101f0:	6a 10                	push   $0x10
   101f2:	60                   	pusha
   101f3:	1e                   	push   %ds
   101f4:	06                   	push   %es
   101f5:	0f a0                	push   %fs
   101f7:	0f a8                	push   %gs
   101f9:	54                   	push   %esp
   101fa:	e8 30 07 00 00       	call   1092f <do_handler_fpu_error>
   101ff:	83 c4 04             	add    $0x4,%esp
   10202:	0f a9                	pop    %gs
   10204:	0f a1                	pop    %fs
   10206:	07                   	pop    %es
   10207:	1f                   	pop    %ds
   10208:	61                   	popa
   10209:	83 c4 08             	add    $0x8,%esp
   1020c:	cf                   	iret

0001020d <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020d:	6a 11                	push   $0x11
   1020f:	60                   	pusha
   10210:	1e                   	push   %ds
   10211:	06                   	push   %es
   10212:	0f a0                	push   %fs
   10214:	0f a8                	push   %gs
   10216:	54                   	push   %esp
   10217:	e8 2f 07 00 00       	call   1094b <do_handler_alignment_check>
   1021c:	83 c4 04             	add    $0x4,%esp
   1021f:	0f a9                	pop    %gs
   10221:	0f a1                	pop    %fs
   10223:	07                   	pop    %es
   10224:	1f                   	pop    %ds
   10225:	61                   	popa
   10226:	83 c4 08             	add    $0x8,%esp
   10229:	cf                   	iret

0001022a <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   1022a:	6a 00                	push   $0x0
   1022c:	6a 12                	push   $0x12
   1022e:	60                   	pusha
   1022f:	1e                   	push   %ds
   10230:	06                   	push   %es
   10231:	0f a0                	push   %fs
   10233:	0f a8                	push   %gs
   10235:	54                   	push   %esp
   10236:	e8 2c 07 00 00       	call   10967 <do_handler_machine_check>
   1023b:	83 c4 04             	add    $0x4,%esp
   1023e:	0f a9                	pop    %gs
   10240:	0f a1                	pop    %fs
   10242:	07                   	pop    %es
   10243:	1f                   	pop    %ds
   10244:	61                   	popa
   10245:	83 c4 08             	add    $0x8,%esp
   10248:	cf                   	iret

00010249 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10249:	6a 00                	push   $0x0
   1024b:	6a 13                	push   $0x13
   1024d:	60                   	pusha
   1024e:	1e                   	push   %ds
   1024f:	06                   	push   %es
   10250:	0f a0                	push   %fs
   10252:	0f a8                	push   %gs
   10254:	54                   	push   %esp
   10255:	e8 29 07 00 00       	call   10983 <do_handler_smd_exception>
   1025a:	83 c4 04             	add    $0x4,%esp
   1025d:	0f a9                	pop    %gs
   1025f:	0f a1                	pop    %fs
   10261:	07                   	pop    %es
   10262:	1f                   	pop    %ds
   10263:	61                   	popa
   10264:	83 c4 08             	add    $0x8,%esp
   10267:	cf                   	iret

00010268 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10268:	6a 00                	push   $0x0
   1026a:	6a 14                	push   $0x14
   1026c:	60                   	pusha
   1026d:	1e                   	push   %ds
   1026e:	06                   	push   %es
   1026f:	0f a0                	push   %fs
   10271:	0f a8                	push   %gs
   10273:	54                   	push   %esp
   10274:	e8 26 07 00 00       	call   1099f <do_handler_virtual_exception>
   10279:	83 c4 04             	add    $0x4,%esp
   1027c:	0f a9                	pop    %gs
   1027e:	0f a1                	pop    %fs
   10280:	07                   	pop    %es
   10281:	1f                   	pop    %ds
   10282:	61                   	popa
   10283:	83 c4 08             	add    $0x8,%esp
   10286:	cf                   	iret

00010287 <exception_handler_control_exception>:
exception_handler control_exception, 21, 1
   10287:	6a 15                	push   $0x15
   10289:	60                   	pusha
   1028a:	1e                   	push   %ds
   1028b:	06                   	push   %es
   1028c:	0f a0                	push   %fs
   1028e:	0f a8                	push   %gs
   10290:	54                   	push   %esp
   10291:	e8 25 07 00 00       	call   109bb <do_handler_control_exception>
   10296:	83 c4 04             	add    $0x4,%esp
   10299:	0f a9                	pop    %gs
   1029b:	0f a1                	pop    %fs
   1029d:	07                   	pop    %es
   1029e:	1f                   	pop    %ds
   1029f:	61                   	popa
   102a0:	83 c4 08             	add    $0x8,%esp
   102a3:	cf                   	iret

000102a4 <exception_handler_timer>:

// 硬件中断
   102a4:	6a 00                	push   $0x0
   102a6:	6a 20                	push   $0x20
   102a8:	60                   	pusha
   102a9:	1e                   	push   %ds
   102aa:	06                   	push   %es
   102ab:	0f a0                	push   %fs
   102ad:	0f a8                	push   %gs
   102af:	54                   	push   %esp
   102b0:	e8 21 0b 00 00       	call   10dd6 <do_handler_timer>
   102b5:	83 c4 04             	add    $0x4,%esp
   102b8:	0f a9                	pop    %gs
   102ba:	0f a1                	pop    %fs
   102bc:	07                   	pop    %es
   102bd:	1f                   	pop    %ds
   102be:	61                   	popa
   102bf:	83 c4 08             	add    $0x8,%esp
   102c2:	cf                   	iret

000102c3 <tss_init>:
#include "core/task.h"
#include "tools/klib.h"
#include "tools/log.h"
#include "os_cfg.h"

static int tss_init (task_t * task, uint32_t entry, uint32_t esp) {
   102c3:	55                   	push   %ebp
   102c4:	89 e5                	mov    %esp,%ebp
   102c6:	83 ec 18             	sub    $0x18,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   102c9:	e8 4d 02 00 00       	call   1051b <gdt_alloc_desc>
   102ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0) {
   102d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102d5:	79 1a                	jns    102f1 <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   102d7:	83 ec 0c             	sub    $0xc,%esp
   102da:	68 78 16 01 00       	push   $0x11678
   102df:	e8 d5 12 00 00       	call   115b9 <log_printf>
   102e4:	83 c4 10             	add    $0x10,%esp
        return -1;
   102e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102ec:	e9 ba 00 00 00       	jmp    103ab <tss_init+0xe8>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), 
   102f1:	8b 45 08             	mov    0x8(%ebp),%eax
   102f4:	68 89 00 00 00       	push   $0x89
   102f9:	6a 68                	push   $0x68
   102fb:	50                   	push   %eax
   102fc:	ff 75 f4             	push   -0xc(%ebp)
   102ff:	e8 4a 01 00 00       	call   1044e <segment_desc_set>
   10304:	83 c4 10             	add    $0x10,%esp
            SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10307:	8b 45 08             	mov    0x8(%ebp),%eax
   1030a:	83 ec 04             	sub    $0x4,%esp
   1030d:	6a 68                	push   $0x68
   1030f:	6a 00                	push   $0x0
   10311:	50                   	push   %eax
   10312:	e8 6c 0e 00 00       	call   11183 <kernel_memset>
   10317:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   1031a:	8b 45 08             	mov    0x8(%ebp),%eax
   1031d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10320:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10323:	8b 45 08             	mov    0x8(%ebp),%eax
   10326:	8b 55 10             	mov    0x10(%ebp),%edx
   10329:	89 50 04             	mov    %edx,0x4(%eax)
   1032c:	8b 45 08             	mov    0x8(%ebp),%eax
   1032f:	8b 50 04             	mov    0x4(%eax),%edx
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10342:	8b 45 08             	mov    0x8(%ebp),%eax
   10345:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
            = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;   // 暂时写死
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   10356:	8b 45 08             	mov    0x8(%ebp),%eax
   10359:	8b 50 5c             	mov    0x5c(%eax),%edx
   1035c:	8b 45 08             	mov    0x8(%ebp),%eax
   1035f:	89 50 58             	mov    %edx,0x58(%eax)
   10362:	8b 45 08             	mov    0x8(%ebp),%eax
   10365:	8b 50 58             	mov    0x58(%eax),%edx
   10368:	8b 45 08             	mov    0x8(%ebp),%eax
   1036b:	89 50 54             	mov    %edx,0x54(%eax)
    task->tss.es = task->tss.ss = task->tss.ds
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	8b 50 54             	mov    0x54(%eax),%edx
   10374:	8b 45 08             	mov    0x8(%ebp),%eax
   10377:	89 50 50             	mov    %edx,0x50(%eax)
   1037a:	8b 45 08             	mov    0x8(%ebp),%eax
   1037d:	8b 50 50             	mov    0x50(%eax),%edx
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;    // 暂时写死
   10386:	8b 45 08             	mov    0x8(%ebp),%eax
   10389:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.iomap = 0;
   10390:	8b 45 08             	mov    0x8(%ebp),%eax
   10393:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)

    task->tss_sel = tss_sel;
   1039a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1039d:	89 c2                	mov    %eax,%edx
   1039f:	8b 45 08             	mov    0x8(%ebp),%eax
   103a2:	66 89 50 68          	mov    %dx,0x68(%eax)
    return 0;
   103a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103ab:	c9                   	leave
   103ac:	c3                   	ret

000103ad <task_init>:

/**
 * @brief 初始化任务
 */
int task_init (task_t *task, uint32_t entry, uint32_t esp) {
   103ad:	55                   	push   %ebp
   103ae:	89 e5                	mov    %esp,%ebp
   103b0:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   103b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103b7:	75 19                	jne    103d2 <task_init+0x25>
   103b9:	68 8b 16 01 00       	push   $0x1168b
   103be:	68 e4 16 01 00       	push   $0x116e4
   103c3:	6a 25                	push   $0x25
   103c5:	68 a0 16 01 00       	push   $0x116a0
   103ca:	e8 03 11 00 00       	call   114d2 <panic>
   103cf:	83 c4 10             	add    $0x10,%esp

    tss_init(task, entry, esp);
   103d2:	83 ec 04             	sub    $0x4,%esp
   103d5:	ff 75 10             	push   0x10(%ebp)
   103d8:	ff 75 0c             	push   0xc(%ebp)
   103db:	ff 75 08             	push   0x8(%ebp)
   103de:	e8 e0 fe ff ff       	call   102c3 <tss_init>
   103e3:	83 c4 10             	add    $0x10,%esp
    return 0;
   103e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103eb:	c9                   	leave
   103ec:	c3                   	ret

000103ed <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void task_switch_from_to (task_t * from, task_t * to) {
   103ed:	55                   	push   %ebp
   103ee:	89 e5                	mov    %esp,%ebp
   103f0:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   103f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   103f6:	0f b7 40 68          	movzwl 0x68(%eax),%eax
   103fa:	0f b7 c0             	movzwl %ax,%eax
   103fd:	83 ec 0c             	sub    $0xc,%esp
   10400:	50                   	push   %eax
   10401:	e8 5a 01 00 00       	call   10560 <switch_to_tss>
   10406:	83 c4 10             	add    $0x10,%esp
}
   10409:	90                   	nop
   1040a:	c9                   	leave
   1040b:	c3                   	ret

0001040c <lgdt>:
	desc->offset15_0 = offset & 0xffff;
	desc->selector = selector;
	desc->attr = attr;
	desc->offset31_16 = (offset >> 16) & 0xffff;
}

   1040c:	55                   	push   %ebp
   1040d:	89 e5                	mov    %esp,%ebp
   1040f:	83 ec 10             	sub    $0x10,%esp
/**
 * 分配一个GDT推荐表符
 */
int gdt_alloc_desc (void) {
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   10412:	8b 45 08             	mov    0x8(%ebp),%eax
   10415:	c1 e8 10             	shr    $0x10,%eax
   10418:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
        segment_desc_t * desc = gdt_table + i;
   1041c:	8b 45 08             	mov    0x8(%ebp),%eax
   1041f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
        if (desc->attr == 0) {
   10423:	8b 45 0c             	mov    0xc(%ebp),%eax
   10426:	83 e8 01             	sub    $0x1,%eax
   10429:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
            return i * sizeof(segment_desc_t);
        }
   1042d:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
    }
   10431:	90                   	nop
   10432:	c9                   	leave
   10433:	c3                   	ret

00010434 <far_jump>:
	
//数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

   10434:	55                   	push   %ebp
   10435:	89 e5                	mov    %esp,%ebp
   10437:	83 ec 10             	sub    $0x10,%esp
    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
   1043a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1043d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10440:	8b 45 08             	mov    0x8(%ebp),%eax
   10443:	89 45 fc             	mov    %eax,-0x4(%ebp)
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10446:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10449:	ff 28                	ljmp   *(%eax)
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
   1044b:	90                   	nop
   1044c:	c9                   	leave
   1044d:	c3                   	ret

0001044e <segment_desc_set>:
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1044e:	55                   	push   %ebp
   1044f:	89 e5                	mov    %esp,%ebp
   10451:	83 ec 14             	sub    $0x14,%esp
   10454:	8b 45 14             	mov    0x14(%ebp),%eax
   10457:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1045b:	8b 45 08             	mov    0x8(%ebp),%eax
   1045e:	c1 f8 03             	sar    $0x3,%eax
   10461:	c1 e0 03             	shl    $0x3,%eax
   10464:	05 40 1a 01 00       	add    $0x11a40,%eax
   10469:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (limit > 0xfffff) {
   1046c:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10473:	76 0f                	jbe    10484 <segment_desc_set+0x36>
		attr |= SEG_G;
   10475:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1047b:	8b 45 10             	mov    0x10(%ebp),%eax
   1047e:	c1 e8 0c             	shr    $0xc,%eax
   10481:	89 45 10             	mov    %eax,0x10(%ebp)
	desc->limit15_0 = limit & 0xffff;
   10484:	8b 45 10             	mov    0x10(%ebp),%eax
   10487:	89 c2                	mov    %eax,%edx
   10489:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1048c:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   1048f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10492:	89 c2                	mov    %eax,%edx
   10494:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10497:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1049b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1049e:	c1 e8 10             	shr    $0x10,%eax
   104a1:	89 c2                	mov    %eax,%edx
   104a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a6:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   104a9:	8b 45 10             	mov    0x10(%ebp),%eax
   104ac:	c1 e8 10             	shr    $0x10,%eax
   104af:	c1 e0 08             	shl    $0x8,%eax
   104b2:	66 25 00 0f          	and    $0xf00,%ax
   104b6:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   104ba:	89 c2                	mov    %eax,%edx
   104bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104bf:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   104c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   104c6:	c1 e8 18             	shr    $0x18,%eax
   104c9:	89 c2                	mov    %eax,%edx
   104cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104ce:	88 50 07             	mov    %dl,0x7(%eax)
}
   104d1:	90                   	nop
   104d2:	c9                   	leave
   104d3:	c3                   	ret

000104d4 <gate_desc_set>:
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   104d4:	55                   	push   %ebp
   104d5:	89 e5                	mov    %esp,%ebp
   104d7:	83 ec 08             	sub    $0x8,%esp
   104da:	8b 55 0c             	mov    0xc(%ebp),%edx
   104dd:	8b 45 14             	mov    0x14(%ebp),%eax
   104e0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   104e4:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   104e8:	8b 45 10             	mov    0x10(%ebp),%eax
   104eb:	89 c2                	mov    %eax,%edx
   104ed:	8b 45 08             	mov    0x8(%ebp),%eax
   104f0:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   104f3:	8b 45 08             	mov    0x8(%ebp),%eax
   104f6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   104fa:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   104fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10501:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10505:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   10509:	8b 45 10             	mov    0x10(%ebp),%eax
   1050c:	c1 e8 10             	shr    $0x10,%eax
   1050f:	89 c2                	mov    %eax,%edx
   10511:	8b 45 08             	mov    0x8(%ebp),%eax
   10514:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10518:	90                   	nop
   10519:	c9                   	leave
   1051a:	c3                   	ret

0001051b <gdt_alloc_desc>:
int gdt_alloc_desc (void) {
   1051b:	55                   	push   %ebp
   1051c:	89 e5                	mov    %esp,%ebp
   1051e:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   10521:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   10528:	eb 26                	jmp    10550 <gdt_alloc_desc+0x35>
        segment_desc_t * desc = gdt_table + i;
   1052a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1052d:	c1 e0 03             	shl    $0x3,%eax
   10530:	05 40 1a 01 00       	add    $0x11a40,%eax
   10535:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0) {
   10538:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1053b:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1053f:	66 85 c0             	test   %ax,%ax
   10542:	75 08                	jne    1054c <gdt_alloc_desc+0x31>
            return i * sizeof(segment_desc_t);
   10544:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10547:	c1 e0 03             	shl    $0x3,%eax
   1054a:	eb 12                	jmp    1055e <gdt_alloc_desc+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++) {
   1054c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10550:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10557:	7e d1                	jle    1052a <gdt_alloc_desc+0xf>
    return -1;
   10559:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1055e:	c9                   	leave
   1055f:	c3                   	ret

00010560 <switch_to_tss>:
void switch_to_tss (uint32_t tss_selector) {
   10560:	55                   	push   %ebp
   10561:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   10563:	6a 00                	push   $0x0
   10565:	ff 75 08             	push   0x8(%ebp)
   10568:	e8 c7 fe ff ff       	call   10434 <far_jump>
   1056d:	83 c4 08             	add    $0x8,%esp
}
   10570:	90                   	nop
   10571:	c9                   	leave
   10572:	c3                   	ret

00010573 <init_gdt>:
void init_gdt(void) {
   10573:	55                   	push   %ebp
   10574:	89 e5                	mov    %esp,%ebp
   10576:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10579:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10580:	eb 19                	jmp    1059b <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   10582:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10585:	c1 e0 03             	shl    $0x3,%eax
   10588:	6a 00                	push   $0x0
   1058a:	6a 00                	push   $0x0
   1058c:	6a 00                	push   $0x0
   1058e:	50                   	push   %eax
   1058f:	e8 ba fe ff ff       	call   1044e <segment_desc_set>
   10594:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10597:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1059b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   105a2:	7e de                	jle    10582 <init_gdt+0xf>
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   105a4:	68 92 c0 00 00       	push   $0xc092
   105a9:	6a ff                	push   $0xffffffff
   105ab:	6a 00                	push   $0x0
   105ad:	6a 10                	push   $0x10
   105af:	e8 9a fe ff ff       	call   1044e <segment_desc_set>
   105b4:	83 c4 10             	add    $0x10,%esp
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   105b7:	68 9a c0 00 00       	push   $0xc09a
   105bc:	6a ff                	push   $0xffffffff
   105be:	6a 00                	push   $0x0
   105c0:	6a 08                	push   $0x8
   105c2:	e8 87 fe ff ff       	call   1044e <segment_desc_set>
   105c7:	83 c4 10             	add    $0x10,%esp
                     | SEG_TYPE_RW | SEG_D | SEG_G);

	lgdt((uint32_t)gdt_table,sizeof(gdt_table));
   105ca:	b8 40 1a 01 00       	mov    $0x11a40,%eax
   105cf:	68 00 08 00 00       	push   $0x800
   105d4:	50                   	push   %eax
   105d5:	e8 32 fe ff ff       	call   1040c <lgdt>
   105da:	83 c4 08             	add    $0x8,%esp
}
   105dd:	90                   	nop
   105de:	c9                   	leave
   105df:	c3                   	ret

000105e0 <cpu_init>:

void cpu_init(void){
   105e0:	55                   	push   %ebp
   105e1:	89 e5                	mov    %esp,%ebp
    init_gdt();
   105e3:	e8 8b ff ff ff       	call   10573 <init_gdt>
   105e8:	90                   	nop
   105e9:	5d                   	pop    %ebp
   105ea:	c3                   	ret

000105eb <inb>:
#include "cpu/irq.h"
#include "cpu/cpu.h"
#include "comm/cpu_instr.h"
#include "os_cfg.h"
#include "tools/log.h"
#define IDT_TABLE_NR 128
   105eb:	55                   	push   %ebp
   105ec:	89 e5                	mov    %esp,%ebp
   105ee:	83 ec 14             	sub    $0x14,%esp
   105f1:	8b 45 08             	mov    0x8(%ebp),%eax
   105f4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)

static gate_desc_t idt_table[IDT_TABLE_NR];

   105f8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105fc:	89 c2                	mov    %eax,%edx
   105fe:	ec                   	in     (%dx),%al
   105ff:	88 45 ff             	mov    %al,-0x1(%ebp)
static void dump_core_regs (exception_frame_t * frame) {
   10602:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    // 打印CPU寄存器相关内容
   10606:	c9                   	leave
   10607:	c3                   	ret

00010608 <outb>:
    );
    log_printf("EAX:0x%x\n"
                "EBX:0x%x\n"
                "ECX:0x%x\n"
                "EDX:0x%x\n"
                "EDI:0x%x\n"
   10608:	55                   	push   %ebp
   10609:	89 e5                	mov    %esp,%ebp
   1060b:	83 ec 08             	sub    $0x8,%esp
   1060e:	8b 55 08             	mov    0x8(%ebp),%edx
   10611:	8b 45 0c             	mov    0xc(%ebp),%eax
   10614:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10618:	88 45 f8             	mov    %al,-0x8(%ebp)
                "ESI:0x%x\n"
   1061b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1061f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10623:	ee                   	out    %al,(%dx)
                "EBP:0x%x\n"
   10624:	90                   	nop
   10625:	c9                   	leave
   10626:	c3                   	ret

00010627 <cli>:
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
   10627:	55                   	push   %ebp
   10628:	89 e5                	mov    %esp,%ebp
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   1062a:	fa                   	cli
}
   1062b:	90                   	nop
   1062c:	5d                   	pop    %ebp
   1062d:	c3                   	ret

0001062e <sti>:

static void do_default_handler (exception_frame_t * frame, const char * message) {
    log_printf("--------------------------------");
   1062e:	55                   	push   %ebp
   1062f:	89 e5                	mov    %esp,%ebp
    log_printf("IRQ/Exception happend: %s.", message);
   10631:	fb                   	sti
    dump_core_regs(frame);
   10632:	90                   	nop
   10633:	5d                   	pop    %ebp
   10634:	c3                   	ret

00010635 <lidt>:
void do_handler_unknown (exception_frame_t * frame) {
	do_default_handler(frame, "Unknown exception.");
}

void do_handler_divider(exception_frame_t * frame) {
	do_default_handler(frame, "Divider Error.");
   10635:	55                   	push   %ebp
   10636:	89 e5                	mov    %esp,%ebp
   10638:	83 ec 10             	sub    $0x10,%esp

void do_handler_Debug(exception_frame_t * frame) {
	do_default_handler(frame, "Debug Exception");
}

void do_handler_NMI(exception_frame_t * frame) {
   1063b:	8b 45 08             	mov    0x8(%ebp),%eax
   1063e:	c1 e8 10             	shr    $0x10,%eax
   10641:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	do_default_handler(frame, "NMI Interrupt.");
   10645:	8b 45 08             	mov    0x8(%ebp),%eax
   10648:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
}
   1064c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1064f:	83 e8 01             	sub    $0x1,%eax
   10652:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

void do_handler_breakpoint(exception_frame_t * frame) {
   10656:	0f 01 5d fa          	lidtl  -0x6(%ebp)
	do_default_handler(frame, "Breakpoint.");
   1065a:	90                   	nop
   1065b:	c9                   	leave
   1065c:	c3                   	ret

0001065d <hlt>:
}

void do_handler_device_unavailable(exception_frame_t * frame) {
	do_default_handler(frame, "Device Not Available.");
}

   1065d:	55                   	push   %ebp
   1065e:	89 e5                	mov    %esp,%ebp
void do_handler_double_fault(exception_frame_t * frame) {
   10660:	f4                   	hlt
	do_default_handler(frame, "Double Fault.");
   10661:	90                   	nop
   10662:	5d                   	pop    %ebp
   10663:	c3                   	ret

00010664 <dump_core_regs>:
static void dump_core_regs (exception_frame_t * frame) {
   10664:	55                   	push   %ebp
   10665:	89 e5                	mov    %esp,%ebp
   10667:	57                   	push   %edi
   10668:	56                   	push   %esi
   10669:	53                   	push   %ebx
   1066a:	83 ec 1c             	sub    $0x1c,%esp
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   1066d:	8b 45 08             	mov    0x8(%ebp),%eax
   10670:	8b 50 34             	mov    0x34(%eax),%edx
   10673:	8b 45 08             	mov    0x8(%ebp),%eax
   10676:	8b 40 30             	mov    0x30(%eax),%eax
   10679:	83 ec 04             	sub    $0x4,%esp
   1067c:	52                   	push   %edx
   1067d:	50                   	push   %eax
   1067e:	68 f0 16 01 00       	push   $0x116f0
   10683:	e8 31 0f 00 00       	call   115b9 <log_printf>
   10688:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   1068b:	8b 45 08             	mov    0x8(%ebp),%eax
   1068e:	8b 38                	mov    (%eax),%edi
   10690:	8b 45 08             	mov    0x8(%ebp),%eax
   10693:	8b 70 04             	mov    0x4(%eax),%esi
   10696:	8b 45 08             	mov    0x8(%ebp),%eax
   10699:	8b 58 0c             	mov    0xc(%eax),%ebx
   1069c:	8b 45 08             	mov    0x8(%ebp),%eax
   1069f:	8b 48 08             	mov    0x8(%eax),%ecx
   106a2:	8b 45 08             	mov    0x8(%ebp),%eax
   106a5:	8b 50 0c             	mov    0xc(%eax),%edx
   106a8:	8b 45 08             	mov    0x8(%ebp),%eax
   106ab:	8b 40 3c             	mov    0x3c(%eax),%eax
   106ae:	83 ec 04             	sub    $0x4,%esp
   106b1:	57                   	push   %edi
   106b2:	56                   	push   %esi
   106b3:	53                   	push   %ebx
   106b4:	51                   	push   %ecx
   106b5:	52                   	push   %edx
   106b6:	50                   	push   %eax
   106b7:	68 0c 17 01 00       	push   $0x1170c
   106bc:	e8 f8 0e 00 00       	call   115b9 <log_printf>
   106c1:	83 c4 20             	add    $0x20,%esp
    log_printf("EAX:0x%x\n"
   106c4:	8b 45 08             	mov    0x8(%ebp),%eax
   106c7:	8b 48 1c             	mov    0x1c(%eax),%ecx
   106ca:	8b 45 08             	mov    0x8(%ebp),%eax
   106cd:	8b 40 18             	mov    0x18(%eax),%eax
   106d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   106d3:	8b 45 08             	mov    0x8(%ebp),%eax
   106d6:	8b 58 14             	mov    0x14(%eax),%ebx
   106d9:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   106dc:	8b 45 08             	mov    0x8(%ebp),%eax
   106df:	8b 78 10             	mov    0x10(%eax),%edi
   106e2:	8b 45 08             	mov    0x8(%ebp),%eax
   106e5:	8b 70 24             	mov    0x24(%eax),%esi
   106e8:	8b 45 08             	mov    0x8(%ebp),%eax
   106eb:	8b 58 28             	mov    0x28(%eax),%ebx
   106ee:	8b 45 08             	mov    0x8(%ebp),%eax
   106f1:	8b 50 20             	mov    0x20(%eax),%edx
   106f4:	8b 45 08             	mov    0x8(%ebp),%eax
   106f7:	8b 40 2c             	mov    0x2c(%eax),%eax
   106fa:	83 ec 0c             	sub    $0xc,%esp
   106fd:	51                   	push   %ecx
   106fe:	ff 75 e4             	push   -0x1c(%ebp)
   10701:	ff 75 e0             	push   -0x20(%ebp)
   10704:	57                   	push   %edi
   10705:	56                   	push   %esi
   10706:	53                   	push   %ebx
   10707:	52                   	push   %edx
   10708:	50                   	push   %eax
   10709:	68 34 17 01 00       	push   $0x11734
   1070e:	e8 a6 0e 00 00       	call   115b9 <log_printf>
   10713:	83 c4 30             	add    $0x30,%esp
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   10716:	8b 45 08             	mov    0x8(%ebp),%eax
   10719:	8b 50 40             	mov    0x40(%eax),%edx
   1071c:	8b 45 08             	mov    0x8(%ebp),%eax
   1071f:	8b 40 38             	mov    0x38(%eax),%eax
   10722:	83 ec 04             	sub    $0x4,%esp
   10725:	52                   	push   %edx
   10726:	50                   	push   %eax
   10727:	68 7d 17 01 00       	push   $0x1177d
   1072c:	e8 88 0e 00 00       	call   115b9 <log_printf>
   10731:	83 c4 10             	add    $0x10,%esp
}
   10734:	90                   	nop
   10735:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10738:	5b                   	pop    %ebx
   10739:	5e                   	pop    %esi
   1073a:	5f                   	pop    %edi
   1073b:	5d                   	pop    %ebp
   1073c:	c3                   	ret

0001073d <do_default_handler>:
static void do_default_handler (exception_frame_t * frame, const char * message) {
   1073d:	55                   	push   %ebp
   1073e:	89 e5                	mov    %esp,%ebp
   10740:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   10743:	83 ec 0c             	sub    $0xc,%esp
   10746:	68 94 17 01 00       	push   $0x11794
   1074b:	e8 69 0e 00 00       	call   115b9 <log_printf>
   10750:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", message);
   10753:	83 ec 08             	sub    $0x8,%esp
   10756:	ff 75 0c             	push   0xc(%ebp)
   10759:	68 b5 17 01 00       	push   $0x117b5
   1075e:	e8 56 0e 00 00       	call   115b9 <log_printf>
   10763:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10766:	83 ec 0c             	sub    $0xc,%esp
   10769:	ff 75 08             	push   0x8(%ebp)
   1076c:	e8 f3 fe ff ff       	call   10664 <dump_core_regs>
   10771:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   10774:	83 ec 0c             	sub    $0xc,%esp
   10777:	68 94 17 01 00       	push   $0x11794
   1077c:	e8 38 0e 00 00       	call   115b9 <log_printf>
   10781:	83 c4 10             	add    $0x10,%esp
        hlt();
   10784:	e8 d4 fe ff ff       	call   1065d <hlt>
   10789:	eb f9                	jmp    10784 <do_default_handler+0x47>

0001078b <do_handler_unknown>:
void do_handler_unknown (exception_frame_t * frame) {
   1078b:	55                   	push   %ebp
   1078c:	89 e5                	mov    %esp,%ebp
   1078e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   10791:	83 ec 08             	sub    $0x8,%esp
   10794:	68 d0 17 01 00       	push   $0x117d0
   10799:	ff 75 08             	push   0x8(%ebp)
   1079c:	e8 9c ff ff ff       	call   1073d <do_default_handler>
   107a1:	83 c4 10             	add    $0x10,%esp
}
   107a4:	90                   	nop
   107a5:	c9                   	leave
   107a6:	c3                   	ret

000107a7 <do_handler_divider>:
void do_handler_divider(exception_frame_t * frame) {
   107a7:	55                   	push   %ebp
   107a8:	89 e5                	mov    %esp,%ebp
   107aa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   107ad:	83 ec 08             	sub    $0x8,%esp
   107b0:	68 e3 17 01 00       	push   $0x117e3
   107b5:	ff 75 08             	push   0x8(%ebp)
   107b8:	e8 80 ff ff ff       	call   1073d <do_default_handler>
   107bd:	83 c4 10             	add    $0x10,%esp
}
   107c0:	90                   	nop
   107c1:	c9                   	leave
   107c2:	c3                   	ret

000107c3 <do_handler_Debug>:
void do_handler_Debug(exception_frame_t * frame) {
   107c3:	55                   	push   %ebp
   107c4:	89 e5                	mov    %esp,%ebp
   107c6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   107c9:	83 ec 08             	sub    $0x8,%esp
   107cc:	68 f2 17 01 00       	push   $0x117f2
   107d1:	ff 75 08             	push   0x8(%ebp)
   107d4:	e8 64 ff ff ff       	call   1073d <do_default_handler>
   107d9:	83 c4 10             	add    $0x10,%esp
}
   107dc:	90                   	nop
   107dd:	c9                   	leave
   107de:	c3                   	ret

000107df <do_handler_NMI>:
void do_handler_NMI(exception_frame_t * frame) {
   107df:	55                   	push   %ebp
   107e0:	89 e5                	mov    %esp,%ebp
   107e2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   107e5:	83 ec 08             	sub    $0x8,%esp
   107e8:	68 02 18 01 00       	push   $0x11802
   107ed:	ff 75 08             	push   0x8(%ebp)
   107f0:	e8 48 ff ff ff       	call   1073d <do_default_handler>
   107f5:	83 c4 10             	add    $0x10,%esp
}
   107f8:	90                   	nop
   107f9:	c9                   	leave
   107fa:	c3                   	ret

000107fb <do_handler_breakpoint>:
void do_handler_breakpoint(exception_frame_t * frame) {
   107fb:	55                   	push   %ebp
   107fc:	89 e5                	mov    %esp,%ebp
   107fe:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   10801:	83 ec 08             	sub    $0x8,%esp
   10804:	68 11 18 01 00       	push   $0x11811
   10809:	ff 75 08             	push   0x8(%ebp)
   1080c:	e8 2c ff ff ff       	call   1073d <do_default_handler>
   10811:	83 c4 10             	add    $0x10,%esp
}
   10814:	90                   	nop
   10815:	c9                   	leave
   10816:	c3                   	ret

00010817 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t * frame) {
   10817:	55                   	push   %ebp
   10818:	89 e5                	mov    %esp,%ebp
   1081a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   1081d:	83 ec 08             	sub    $0x8,%esp
   10820:	68 1d 18 01 00       	push   $0x1181d
   10825:	ff 75 08             	push   0x8(%ebp)
   10828:	e8 10 ff ff ff       	call   1073d <do_default_handler>
   1082d:	83 c4 10             	add    $0x10,%esp
}
   10830:	90                   	nop
   10831:	c9                   	leave
   10832:	c3                   	ret

00010833 <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t * frame) {
   10833:	55                   	push   %ebp
   10834:	89 e5                	mov    %esp,%ebp
   10836:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   10839:	83 ec 08             	sub    $0x8,%esp
   1083c:	68 27 18 01 00       	push   $0x11827
   10841:	ff 75 08             	push   0x8(%ebp)
   10844:	e8 f4 fe ff ff       	call   1073d <do_default_handler>
   10849:	83 c4 10             	add    $0x10,%esp
}
   1084c:	90                   	nop
   1084d:	c9                   	leave
   1084e:	c3                   	ret

0001084f <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t * frame) {
   1084f:	55                   	push   %ebp
   10850:	89 e5                	mov    %esp,%ebp
   10852:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   10855:	83 ec 08             	sub    $0x8,%esp
   10858:	68 3d 18 01 00       	push   $0x1183d
   1085d:	ff 75 08             	push   0x8(%ebp)
   10860:	e8 d8 fe ff ff       	call   1073d <do_default_handler>
   10865:	83 c4 10             	add    $0x10,%esp
}
   10868:	90                   	nop
   10869:	c9                   	leave
   1086a:	c3                   	ret

0001086b <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t * frame) {
   1086b:	55                   	push   %ebp
   1086c:	89 e5                	mov    %esp,%ebp
   1086e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   10871:	83 ec 08             	sub    $0x8,%esp
   10874:	68 4d 18 01 00       	push   $0x1184d
   10879:	ff 75 08             	push   0x8(%ebp)
   1087c:	e8 bc fe ff ff       	call   1073d <do_default_handler>
   10881:	83 c4 10             	add    $0x10,%esp
}
   10884:	90                   	nop
   10885:	c9                   	leave
   10886:	c3                   	ret

00010887 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t * frame) {
   10887:	55                   	push   %ebp
   10888:	89 e5                	mov    %esp,%ebp
   1088a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   1088d:	83 ec 08             	sub    $0x8,%esp
   10890:	68 63 18 01 00       	push   $0x11863
   10895:	ff 75 08             	push   0x8(%ebp)
   10898:	e8 a0 fe ff ff       	call   1073d <do_default_handler>
   1089d:	83 c4 10             	add    $0x10,%esp
}
   108a0:	90                   	nop
   108a1:	c9                   	leave
   108a2:	c3                   	ret

000108a3 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   108a3:	55                   	push   %ebp
   108a4:	89 e5                	mov    %esp,%ebp
   108a6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   108a9:	83 ec 08             	sub    $0x8,%esp
   108ac:	68 71 18 01 00       	push   $0x11871
   108b1:	ff 75 08             	push   0x8(%ebp)
   108b4:	e8 84 fe ff ff       	call   1073d <do_default_handler>
   108b9:	83 c4 10             	add    $0x10,%esp
}
   108bc:	90                   	nop
   108bd:	c9                   	leave
   108be:	c3                   	ret

000108bf <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   108bf:	55                   	push   %ebp
   108c0:	89 e5                	mov    %esp,%ebp
   108c2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   108c5:	83 ec 08             	sub    $0x8,%esp
   108c8:	68 7d 18 01 00       	push   $0x1187d
   108cd:	ff 75 08             	push   0x8(%ebp)
   108d0:	e8 68 fe ff ff       	call   1073d <do_default_handler>
   108d5:	83 c4 10             	add    $0x10,%esp
}
   108d8:	90                   	nop
   108d9:	c9                   	leave
   108da:	c3                   	ret

000108db <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   108db:	55                   	push   %ebp
   108dc:	89 e5                	mov    %esp,%ebp
   108de:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   108e1:	83 ec 08             	sub    $0x8,%esp
   108e4:	68 92 18 01 00       	push   $0x11892
   108e9:	ff 75 08             	push   0x8(%ebp)
   108ec:	e8 4c fe ff ff       	call   1073d <do_default_handler>
   108f1:	83 c4 10             	add    $0x10,%esp
}
   108f4:	90                   	nop
   108f5:	c9                   	leave
   108f6:	c3                   	ret

000108f7 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   108f7:	55                   	push   %ebp
   108f8:	89 e5                	mov    %esp,%ebp
   108fa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "General Protection.");
   108fd:	83 ec 08             	sub    $0x8,%esp
   10900:	68 a7 18 01 00       	push   $0x118a7
   10905:	ff 75 08             	push   0x8(%ebp)
   10908:	e8 30 fe ff ff       	call   1073d <do_default_handler>
   1090d:	83 c4 10             	add    $0x10,%esp
}
   10910:	90                   	nop
   10911:	c9                   	leave
   10912:	c3                   	ret

00010913 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   10913:	55                   	push   %ebp
   10914:	89 e5                	mov    %esp,%ebp
   10916:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Page Fault.");
   10919:	83 ec 08             	sub    $0x8,%esp
   1091c:	68 bb 18 01 00       	push   $0x118bb
   10921:	ff 75 08             	push   0x8(%ebp)
   10924:	e8 14 fe ff ff       	call   1073d <do_default_handler>
   10929:	83 c4 10             	add    $0x10,%esp
}
   1092c:	90                   	nop
   1092d:	c9                   	leave
   1092e:	c3                   	ret

0001092f <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   1092f:	55                   	push   %ebp
   10930:	89 e5                	mov    %esp,%ebp
   10932:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   10935:	83 ec 08             	sub    $0x8,%esp
   10938:	68 c7 18 01 00       	push   $0x118c7
   1093d:	ff 75 08             	push   0x8(%ebp)
   10940:	e8 f8 fd ff ff       	call   1073d <do_default_handler>
   10945:	83 c4 10             	add    $0x10,%esp
}
   10948:	90                   	nop
   10949:	c9                   	leave
   1094a:	c3                   	ret

0001094b <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   1094b:	55                   	push   %ebp
   1094c:	89 e5                	mov    %esp,%ebp
   1094e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   10951:	83 ec 08             	sub    $0x8,%esp
   10954:	68 e5 18 01 00       	push   $0x118e5
   10959:	ff 75 08             	push   0x8(%ebp)
   1095c:	e8 dc fd ff ff       	call   1073d <do_default_handler>
   10961:	83 c4 10             	add    $0x10,%esp
}
   10964:	90                   	nop
   10965:	c9                   	leave
   10966:	c3                   	ret

00010967 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   10967:	55                   	push   %ebp
   10968:	89 e5                	mov    %esp,%ebp
   1096a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   1096d:	83 ec 08             	sub    $0x8,%esp
   10970:	68 f6 18 01 00       	push   $0x118f6
   10975:	ff 75 08             	push   0x8(%ebp)
   10978:	e8 c0 fd ff ff       	call   1073d <do_default_handler>
   1097d:	83 c4 10             	add    $0x10,%esp
}
   10980:	90                   	nop
   10981:	c9                   	leave
   10982:	c3                   	ret

00010983 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   10983:	55                   	push   %ebp
   10984:	89 e5                	mov    %esp,%ebp
   10986:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   10989:	83 ec 08             	sub    $0x8,%esp
   1098c:	68 08 19 01 00       	push   $0x11908
   10991:	ff 75 08             	push   0x8(%ebp)
   10994:	e8 a4 fd ff ff       	call   1073d <do_default_handler>
   10999:	83 c4 10             	add    $0x10,%esp
}
   1099c:	90                   	nop
   1099d:	c9                   	leave
   1099e:	c3                   	ret

0001099f <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   1099f:	55                   	push   %ebp
   109a0:	89 e5                	mov    %esp,%ebp
   109a2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   109a5:	83 ec 08             	sub    $0x8,%esp
   109a8:	68 27 19 01 00       	push   $0x11927
   109ad:	ff 75 08             	push   0x8(%ebp)
   109b0:	e8 88 fd ff ff       	call   1073d <do_default_handler>
   109b5:	83 c4 10             	add    $0x10,%esp
}
   109b8:	90                   	nop
   109b9:	c9                   	leave
   109ba:	c3                   	ret

000109bb <do_handler_control_exception>:

void do_handler_control_exception(exception_frame_t * frame) {
   109bb:	55                   	push   %ebp
   109bc:	89 e5                	mov    %esp,%ebp
   109be:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Control Exception.");
   109c1:	83 ec 08             	sub    $0x8,%esp
   109c4:	68 41 19 01 00       	push   $0x11941
   109c9:	ff 75 08             	push   0x8(%ebp)
   109cc:	e8 6c fd ff ff       	call   1073d <do_default_handler>
   109d1:	83 c4 10             	add    $0x10,%esp
}
   109d4:	90                   	nop
   109d5:	c9                   	leave
   109d6:	c3                   	ret

000109d7 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   109d7:	55                   	push   %ebp
   109d8:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   109da:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8) {
   109de:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   109e2:	7e 0f                	jle    109f3 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   109e4:	6a 20                	push   $0x20
   109e6:	68 a0 00 00 00       	push   $0xa0
   109eb:	e8 18 fc ff ff       	call   10608 <outb>
   109f0:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   109f3:	6a 20                	push   $0x20
   109f5:	6a 20                	push   $0x20
   109f7:	e8 0c fc ff ff       	call   10608 <outb>
   109fc:	83 c4 08             	add    $0x8,%esp
}
   109ff:	90                   	nop
   10a00:	c9                   	leave
   10a01:	c3                   	ret

00010a02 <init_pic>:

static void init_pic(void) {
   10a02:	55                   	push   %ebp
   10a03:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10a05:	6a 11                	push   $0x11
   10a07:	6a 20                	push   $0x20
   10a09:	e8 fa fb ff ff       	call   10608 <outb>
   10a0e:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   10a11:	6a 20                	push   $0x20
   10a13:	6a 21                	push   $0x21
   10a15:	e8 ee fb ff ff       	call   10608 <outb>
   10a1a:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   10a1d:	6a 04                	push   $0x4
   10a1f:	6a 21                	push   $0x21
   10a21:	e8 e2 fb ff ff       	call   10608 <outb>
   10a26:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   10a29:	6a 01                	push   $0x1
   10a2b:	6a 21                	push   $0x21
   10a2d:	e8 d6 fb ff ff       	call   10608 <outb>
   10a32:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10a35:	6a 11                	push   $0x11
   10a37:	68 a0 00 00 00       	push   $0xa0
   10a3c:	e8 c7 fb ff ff       	call   10608 <outb>
   10a41:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   10a44:	6a 28                	push   $0x28
   10a46:	68 a1 00 00 00       	push   $0xa1
   10a4b:	e8 b8 fb ff ff       	call   10608 <outb>
   10a50:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   10a53:	6a 02                	push   $0x2
   10a55:	68 a1 00 00 00       	push   $0xa1
   10a5a:	e8 a9 fb ff ff       	call   10608 <outb>
   10a5f:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   10a62:	6a 01                	push   $0x1
   10a64:	68 a1 00 00 00       	push   $0xa1
   10a69:	e8 9a fb ff ff       	call   10608 <outb>
   10a6e:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10a71:	68 fb 00 00 00       	push   $0xfb
   10a76:	6a 21                	push   $0x21
   10a78:	e8 8b fb ff ff       	call   10608 <outb>
   10a7d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10a80:	68 ff 00 00 00       	push   $0xff
   10a85:	68 a1 00 00 00       	push   $0xa1
   10a8a:	e8 79 fb ff ff       	call   10608 <outb>
   10a8f:	83 c4 08             	add    $0x8,%esp
}
   10a92:	90                   	nop
   10a93:	c9                   	leave
   10a94:	c3                   	ret

00010a95 <irq_install>:

/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler) {
   10a95:	55                   	push   %ebp
   10a96:	89 e5                	mov    %esp,%ebp
   10a98:	83 ec 08             	sub    $0x8,%esp
	if (irq_num >= IDT_TABLE_NR) {
   10a9b:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10a9f:	7e 07                	jle    10aa8 <irq_install+0x13>
		return -1;
   10aa1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10aa6:	eb 25                	jmp    10acd <irq_install+0x38>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   10aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10aab:	8b 55 08             	mov    0x8(%ebp),%edx
   10aae:	c1 e2 03             	shl    $0x3,%edx
   10ab1:	81 c2 40 22 01 00    	add    $0x12240,%edx
   10ab7:	68 00 8e 00 00       	push   $0x8e00
   10abc:	50                   	push   %eax
   10abd:	6a 08                	push   $0x8
   10abf:	52                   	push   %edx
   10ac0:	e8 0f fa ff ff       	call   104d4 <gate_desc_set>
   10ac5:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   10ac8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10acd:	c9                   	leave
   10ace:	c3                   	ret

00010acf <irq_init>:

void irq_init(void){
   10acf:	55                   	push   %ebp
   10ad0:	89 e5                	mov    %esp,%ebp
   10ad2:	83 ec 18             	sub    $0x18,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   10ad5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10adc:	eb 25                	jmp    10b03 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   10ade:	ba 29 00 01 00       	mov    $0x10029,%edx
   10ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ae6:	c1 e0 03             	shl    $0x3,%eax
   10ae9:	05 40 22 01 00       	add    $0x12240,%eax
   10aee:	68 00 8e 00 00       	push   $0x8e00
   10af3:	52                   	push   %edx
   10af4:	6a 08                	push   $0x8
   10af6:	50                   	push   %eax
   10af7:	e8 d8 f9 ff ff       	call   104d4 <gate_desc_set>
   10afc:	83 c4 10             	add    $0x10,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   10aff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10b03:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10b07:	76 d5                	jbe    10ade <irq_init+0xf>
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

	// 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   10b09:	83 ec 08             	sub    $0x8,%esp
   10b0c:	68 48 00 01 00       	push   $0x10048
   10b11:	6a 00                	push   $0x0
   10b13:	e8 7d ff ff ff       	call   10a95 <irq_install>
   10b18:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   10b1b:	83 ec 08             	sub    $0x8,%esp
   10b1e:	68 67 00 01 00       	push   $0x10067
   10b23:	6a 01                	push   $0x1
   10b25:	e8 6b ff ff ff       	call   10a95 <irq_install>
   10b2a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   10b2d:	83 ec 08             	sub    $0x8,%esp
   10b30:	68 86 00 01 00       	push   $0x10086
   10b35:	6a 02                	push   $0x2
   10b37:	e8 59 ff ff ff       	call   10a95 <irq_install>
   10b3c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   10b3f:	83 ec 08             	sub    $0x8,%esp
   10b42:	68 a5 00 01 00       	push   $0x100a5
   10b47:	6a 03                	push   $0x3
   10b49:	e8 47 ff ff ff       	call   10a95 <irq_install>
   10b4e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   10b51:	83 ec 08             	sub    $0x8,%esp
   10b54:	68 c4 00 01 00       	push   $0x100c4
   10b59:	6a 04                	push   $0x4
   10b5b:	e8 35 ff ff ff       	call   10a95 <irq_install>
   10b60:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   10b63:	83 ec 08             	sub    $0x8,%esp
   10b66:	68 e3 00 01 00       	push   $0x100e3
   10b6b:	6a 05                	push   $0x5
   10b6d:	e8 23 ff ff ff       	call   10a95 <irq_install>
   10b72:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   10b75:	83 ec 08             	sub    $0x8,%esp
   10b78:	68 02 01 01 00       	push   $0x10102
   10b7d:	6a 06                	push   $0x6
   10b7f:	e8 11 ff ff ff       	call   10a95 <irq_install>
   10b84:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   10b87:	83 ec 08             	sub    $0x8,%esp
   10b8a:	68 21 01 01 00       	push   $0x10121
   10b8f:	6a 07                	push   $0x7
   10b91:	e8 ff fe ff ff       	call   10a95 <irq_install>
   10b96:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   10b99:	83 ec 08             	sub    $0x8,%esp
   10b9c:	68 40 01 01 00       	push   $0x10140
   10ba1:	6a 08                	push   $0x8
   10ba3:	e8 ed fe ff ff       	call   10a95 <irq_install>
   10ba8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   10bab:	83 ec 08             	sub    $0x8,%esp
   10bae:	68 5d 01 01 00       	push   $0x1015d
   10bb3:	6a 0a                	push   $0xa
   10bb5:	e8 db fe ff ff       	call   10a95 <irq_install>
   10bba:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   10bbd:	83 ec 08             	sub    $0x8,%esp
   10bc0:	68 7a 01 01 00       	push   $0x1017a
   10bc5:	6a 0b                	push   $0xb
   10bc7:	e8 c9 fe ff ff       	call   10a95 <irq_install>
   10bcc:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   10bcf:	83 ec 08             	sub    $0x8,%esp
   10bd2:	68 97 01 01 00       	push   $0x10197
   10bd7:	6a 0c                	push   $0xc
   10bd9:	e8 b7 fe ff ff       	call   10a95 <irq_install>
   10bde:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   10be1:	83 ec 08             	sub    $0x8,%esp
   10be4:	68 b4 01 01 00       	push   $0x101b4
   10be9:	6a 0d                	push   $0xd
   10beb:	e8 a5 fe ff ff       	call   10a95 <irq_install>
   10bf0:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   10bf3:	83 ec 08             	sub    $0x8,%esp
   10bf6:	68 d1 01 01 00       	push   $0x101d1
   10bfb:	6a 0e                	push   $0xe
   10bfd:	e8 93 fe ff ff       	call   10a95 <irq_install>
   10c02:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   10c05:	83 ec 08             	sub    $0x8,%esp
   10c08:	68 ee 01 01 00       	push   $0x101ee
   10c0d:	6a 10                	push   $0x10
   10c0f:	e8 81 fe ff ff       	call   10a95 <irq_install>
   10c14:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   10c17:	83 ec 08             	sub    $0x8,%esp
   10c1a:	68 0d 02 01 00       	push   $0x1020d
   10c1f:	6a 11                	push   $0x11
   10c21:	e8 6f fe ff ff       	call   10a95 <irq_install>
   10c26:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   10c29:	83 ec 08             	sub    $0x8,%esp
   10c2c:	68 2a 02 01 00       	push   $0x1022a
   10c31:	6a 12                	push   $0x12
   10c33:	e8 5d fe ff ff       	call   10a95 <irq_install>
   10c38:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   10c3b:	83 ec 08             	sub    $0x8,%esp
   10c3e:	68 49 02 01 00       	push   $0x10249
   10c43:	6a 13                	push   $0x13
   10c45:	e8 4b fe ff ff       	call   10a95 <irq_install>
   10c4a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   10c4d:	83 ec 08             	sub    $0x8,%esp
   10c50:	68 68 02 01 00       	push   $0x10268
   10c55:	6a 14                	push   $0x14
   10c57:	e8 39 fe ff ff       	call   10a95 <irq_install>
   10c5c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ21_CP, exception_handler_control_exception);
   10c5f:	83 ec 08             	sub    $0x8,%esp
   10c62:	68 87 02 01 00       	push   $0x10287
   10c67:	6a 15                	push   $0x15
   10c69:	e8 27 fe ff ff       	call   10a95 <irq_install>
   10c6e:	83 c4 10             	add    $0x10,%esp

    lidt((uint32_t)idt_table,sizeof(idt_table));
   10c71:	b8 40 22 01 00       	mov    $0x12240,%eax
   10c76:	83 ec 08             	sub    $0x8,%esp
   10c79:	68 00 04 00 00       	push   $0x400
   10c7e:	50                   	push   %eax
   10c7f:	e8 b1 f9 ff ff       	call   10635 <lidt>
   10c84:	83 c4 10             	add    $0x10,%esp
	init_pic();
   10c87:	e8 76 fd ff ff       	call   10a02 <init_pic>
}
   10c8c:	90                   	nop
   10c8d:	c9                   	leave
   10c8e:	c3                   	ret

00010c8f <irq_enable>:

void irq_enable(int irq_num) {
   10c8f:	55                   	push   %ebp
   10c90:	89 e5                	mov    %esp,%ebp
   10c92:	53                   	push   %ebx
   10c93:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10c96:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c9a:	7e 78                	jle    10d14 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10c9c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10ca0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10ca4:	7f 32                	jg     10cd8 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10ca6:	6a 21                	push   $0x21
   10ca8:	e8 3e f9 ff ff       	call   105eb <inb>
   10cad:	83 c4 04             	add    $0x4,%esp
   10cb0:	89 c3                	mov    %eax,%ebx
   10cb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb5:	ba 01 00 00 00       	mov    $0x1,%edx
   10cba:	89 c1                	mov    %eax,%ecx
   10cbc:	d3 e2                	shl    %cl,%edx
   10cbe:	89 d0                	mov    %edx,%eax
   10cc0:	f7 d0                	not    %eax
   10cc2:	21 d8                	and    %ebx,%eax
   10cc4:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10cc7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10ccb:	50                   	push   %eax
   10ccc:	6a 21                	push   $0x21
   10cce:	e8 35 f9 ff ff       	call   10608 <outb>
   10cd3:	83 c4 08             	add    $0x8,%esp
   10cd6:	eb 3d                	jmp    10d15 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   10cd8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10cdc:	68 a1 00 00 00       	push   $0xa1
   10ce1:	e8 05 f9 ff ff       	call   105eb <inb>
   10ce6:	83 c4 04             	add    $0x4,%esp
   10ce9:	89 c3                	mov    %eax,%ebx
   10ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cee:	ba 01 00 00 00       	mov    $0x1,%edx
   10cf3:	89 c1                	mov    %eax,%ecx
   10cf5:	d3 e2                	shl    %cl,%edx
   10cf7:	89 d0                	mov    %edx,%eax
   10cf9:	f7 d0                	not    %eax
   10cfb:	21 d8                	and    %ebx,%eax
   10cfd:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d00:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d04:	50                   	push   %eax
   10d05:	68 a1 00 00 00       	push   $0xa1
   10d0a:	e8 f9 f8 ff ff       	call   10608 <outb>
   10d0f:	83 c4 08             	add    $0x8,%esp
   10d12:	eb 01                	jmp    10d15 <irq_enable+0x86>
        return;
   10d14:	90                   	nop
    }
}
   10d15:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d18:	c9                   	leave
   10d19:	c3                   	ret

00010d1a <irq_disable>:

void irq_disable(int irq_num) {
   10d1a:	55                   	push   %ebp
   10d1b:	89 e5                	mov    %esp,%ebp
   10d1d:	53                   	push   %ebx
   10d1e:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   10d21:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10d25:	7e 74                	jle    10d9b <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   10d27:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   10d2b:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d2f:	7f 30                	jg     10d61 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10d31:	6a 21                	push   $0x21
   10d33:	e8 b3 f8 ff ff       	call   105eb <inb>
   10d38:	83 c4 04             	add    $0x4,%esp
   10d3b:	89 c3                	mov    %eax,%ebx
   10d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d40:	ba 01 00 00 00       	mov    $0x1,%edx
   10d45:	89 c1                	mov    %eax,%ecx
   10d47:	d3 e2                	shl    %cl,%edx
   10d49:	89 d0                	mov    %edx,%eax
   10d4b:	09 d8                	or     %ebx,%eax
   10d4d:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10d50:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10d54:	50                   	push   %eax
   10d55:	6a 21                	push   $0x21
   10d57:	e8 ac f8 ff ff       	call   10608 <outb>
   10d5c:	83 c4 08             	add    $0x8,%esp
   10d5f:	eb 3b                	jmp    10d9c <irq_disable+0x82>
    } else {
        irq_num -= 8;
   10d61:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10d65:	68 a1 00 00 00       	push   $0xa1
   10d6a:	e8 7c f8 ff ff       	call   105eb <inb>
   10d6f:	83 c4 04             	add    $0x4,%esp
   10d72:	89 c3                	mov    %eax,%ebx
   10d74:	8b 45 08             	mov    0x8(%ebp),%eax
   10d77:	ba 01 00 00 00       	mov    $0x1,%edx
   10d7c:	89 c1                	mov    %eax,%ecx
   10d7e:	d3 e2                	shl    %cl,%edx
   10d80:	89 d0                	mov    %edx,%eax
   10d82:	09 d8                	or     %ebx,%eax
   10d84:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d87:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d8b:	50                   	push   %eax
   10d8c:	68 a1 00 00 00       	push   $0xa1
   10d91:	e8 72 f8 ff ff       	call   10608 <outb>
   10d96:	83 c4 08             	add    $0x8,%esp
   10d99:	eb 01                	jmp    10d9c <irq_disable+0x82>
        return;
   10d9b:	90                   	nop
    }
}
   10d9c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d9f:	c9                   	leave
   10da0:	c3                   	ret

00010da1 <irq_disable_global>:

void irq_disable_global(void) {
   10da1:	55                   	push   %ebp
   10da2:	89 e5                	mov    %esp,%ebp
    cli();
   10da4:	e8 7e f8 ff ff       	call   10627 <cli>
}
   10da9:	90                   	nop
   10daa:	5d                   	pop    %ebp
   10dab:	c3                   	ret

00010dac <irq_enable_global>:

void irq_enable_global(void) {
   10dac:	55                   	push   %ebp
   10dad:	89 e5                	mov    %esp,%ebp
    sti();
   10daf:	e8 7a f8 ff ff       	call   1062e <sti>
   10db4:	90                   	nop
   10db5:	5d                   	pop    %ebp
   10db6:	c3                   	ret

00010db7 <outb>:
void do_handler_timer (exception_frame_t *frame) {
    sys_tick++;
    log_printf("timer is running....");
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续噢应
    pic_send_eoi(IRQ0_TIMER);
   10db7:	55                   	push   %ebp
   10db8:	89 e5                	mov    %esp,%ebp
   10dba:	83 ec 08             	sub    $0x8,%esp
   10dbd:	8b 55 08             	mov    0x8(%ebp),%edx
   10dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10dc3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10dc7:	88 45 f8             	mov    %al,-0x8(%ebp)
}
   10dca:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10dce:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10dd2:	ee                   	out    %al,(%dx)

   10dd3:	90                   	nop
   10dd4:	c9                   	leave
   10dd5:	c3                   	ret

00010dd6 <do_handler_timer>:
void do_handler_timer (exception_frame_t *frame) {
   10dd6:	55                   	push   %ebp
   10dd7:	89 e5                	mov    %esp,%ebp
   10dd9:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10ddc:	a1 40 26 01 00       	mov    0x12640,%eax
   10de1:	83 c0 01             	add    $0x1,%eax
   10de4:	a3 40 26 01 00       	mov    %eax,0x12640
    log_printf("timer is running....");
   10de9:	83 ec 0c             	sub    $0xc,%esp
   10dec:	68 54 19 01 00       	push   $0x11954
   10df1:	e8 c3 07 00 00       	call   115b9 <log_printf>
   10df6:	83 c4 10             	add    $0x10,%esp
    pic_send_eoi(IRQ0_TIMER);
   10df9:	83 ec 0c             	sub    $0xc,%esp
   10dfc:	6a 20                	push   $0x20
   10dfe:	e8 d4 fb ff ff       	call   109d7 <pic_send_eoi>
   10e03:	83 c4 10             	add    $0x10,%esp
}
   10e06:	90                   	nop
   10e07:	c9                   	leave
   10e08:	c3                   	ret

00010e09 <init_pit>:
/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   10e09:	55                   	push   %ebp
   10e0a:	89 e5                	mov    %esp,%ebp
   10e0c:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   10e0f:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
   10e16:	6a 36                	push   $0x36
   10e18:	6a 43                	push   $0x43
   10e1a:	e8 98 ff ff ff       	call   10db7 <outb>
   10e1f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   10e22:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e25:	0f b6 c0             	movzbl %al,%eax
   10e28:	50                   	push   %eax
   10e29:	6a 40                	push   $0x40
   10e2b:	e8 87 ff ff ff       	call   10db7 <outb>
   10e30:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   10e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e36:	c1 e8 08             	shr    $0x8,%eax
   10e39:	0f b6 c0             	movzbl %al,%eax
   10e3c:	50                   	push   %eax
   10e3d:	6a 40                	push   $0x40
   10e3f:	e8 73 ff ff ff       	call   10db7 <outb>
   10e44:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10e47:	83 ec 08             	sub    $0x8,%esp
   10e4a:	68 a4 02 01 00       	push   $0x102a4
   10e4f:	6a 20                	push   $0x20
   10e51:	e8 3f fc ff ff       	call   10a95 <irq_install>
   10e56:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10e59:	83 ec 0c             	sub    $0xc,%esp
   10e5c:	6a 20                	push   $0x20
   10e5e:	e8 2c fe ff ff       	call   10c8f <irq_enable>
   10e63:	83 c4 10             	add    $0x10,%esp
}
   10e66:	90                   	nop
   10e67:	c9                   	leave
   10e68:	c3                   	ret

00010e69 <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   10e69:	55                   	push   %ebp
   10e6a:	89 e5                	mov    %esp,%ebp
   10e6c:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e6f:	c7 05 40 26 01 00 00 	movl   $0x0,0x12640
   10e76:	00 00 00 

    init_pit();
   10e79:	e8 8b ff ff ff       	call   10e09 <init_pit>
}
   10e7e:	90                   	nop
   10e7f:	c9                   	leave
   10e80:	c3                   	ret

00010e81 <write_tr>:
   10e81:	55                   	push   %ebp
   10e82:	89 e5                	mov    %esp,%ebp
   10e84:	8b 45 08             	mov    0x8(%ebp),%eax
   10e87:	0f 00 d8             	ltr    %ax
   10e8a:	90                   	nop
   10e8b:	5d                   	pop    %ebp
   10e8c:	c3                   	ret

00010e8d <kernel_init>:
void kernel_init(boot_info_t * boot_info){
   10e8d:	55                   	push   %ebp
   10e8e:	89 e5                	mov    %esp,%ebp
   10e90:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   10e93:	8b 45 08             	mov    0x8(%ebp),%eax
   10e96:	a3 60 26 01 00       	mov    %eax,0x12660
    cpu_init();
   10e9b:	e8 40 f7 ff ff       	call   105e0 <cpu_init>
    log_init();
   10ea0:	e8 9f 06 00 00       	call   11544 <log_init>
    irq_init();
   10ea5:	e8 25 fc ff ff       	call   10acf <irq_init>
    time_init();
   10eaa:	e8 ba ff ff ff       	call   10e69 <time_init>
}
   10eaf:	90                   	nop
   10eb0:	c9                   	leave
   10eb1:	c3                   	ret

00010eb2 <init_task_entry>:
void init_task_entry(void) {
   10eb2:	55                   	push   %ebp
   10eb3:	89 e5                	mov    %esp,%ebp
   10eb5:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10eb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_printf("init task: %d", count++);
   10ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ec2:	8d 50 01             	lea    0x1(%eax),%edx
   10ec5:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10ec8:	83 ec 08             	sub    $0x8,%esp
   10ecb:	50                   	push   %eax
   10ecc:	68 69 19 01 00       	push   $0x11969
   10ed1:	e8 e3 06 00 00       	call   115b9 <log_printf>
   10ed6:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task, &first_task);
   10ed9:	83 ec 08             	sub    $0x8,%esp
   10edc:	68 80 26 01 00       	push   $0x12680
   10ee1:	68 00 37 01 00       	push   $0x13700
   10ee6:	e8 02 f5 ff ff       	call   103ed <task_switch_from_to>
   10eeb:	83 c4 10             	add    $0x10,%esp
        log_printf("init task: %d", count++);
   10eee:	eb cf                	jmp    10ebf <init_task_entry+0xd>

00010ef0 <init_main>:
void init_main(void) {
   10ef0:	55                   	push   %ebp
   10ef1:	89 e5                	mov    %esp,%ebp
   10ef3:	83 ec 18             	sub    $0x18,%esp
    log_printf("Kernel is running....");
   10ef6:	83 ec 0c             	sub    $0xc,%esp
   10ef9:	68 77 19 01 00       	push   $0x11977
   10efe:	e8 b6 06 00 00       	call   115b9 <log_printf>
   10f03:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s, name: %s", OS_VERSION, "tiny x86 os");
   10f06:	83 ec 04             	sub    $0x4,%esp
   10f09:	68 8d 19 01 00       	push   $0x1198d
   10f0e:	68 99 19 01 00       	push   $0x11999
   10f13:	68 9f 19 01 00       	push   $0x1199f
   10f18:	e8 9c 06 00 00       	call   115b9 <log_printf>
   10f1d:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", -123, 123456, 0x12345, 'a');
   10f20:	83 ec 0c             	sub    $0xc,%esp
   10f23:	6a 61                	push   $0x61
   10f25:	68 45 23 01 00       	push   $0x12345
   10f2a:	68 40 e2 01 00       	push   $0x1e240
   10f2f:	6a 85                	push   $0xffffff85
   10f31:	68 b5 19 01 00       	push   $0x119b5
   10f36:	e8 7e 06 00 00       	call   115b9 <log_printf>
   10f3b:	83 c4 20             	add    $0x20,%esp
    task_init(&init_task, (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]);
   10f3e:	ba 00 37 01 00       	mov    $0x13700,%edx
   10f43:	b8 b2 0e 01 00       	mov    $0x10eb2,%eax
   10f48:	83 ec 04             	sub    $0x4,%esp
   10f4b:	52                   	push   %edx
   10f4c:	50                   	push   %eax
   10f4d:	68 00 37 01 00       	push   $0x13700
   10f52:	e8 56 f4 ff ff       	call   103ad <task_init>
   10f57:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0, 0);
   10f5a:	83 ec 04             	sub    $0x4,%esp
   10f5d:	6a 00                	push   $0x0
   10f5f:	6a 00                	push   $0x0
   10f61:	68 80 26 01 00       	push   $0x12680
   10f66:	e8 42 f4 ff ff       	call   103ad <task_init>
   10f6b:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel);
   10f6e:	0f b7 05 e8 26 01 00 	movzwl 0x126e8,%eax
   10f75:	0f b7 c0             	movzwl %ax,%eax
   10f78:	83 ec 0c             	sub    $0xc,%esp
   10f7b:	50                   	push   %eax
   10f7c:	e8 00 ff ff ff       	call   10e81 <write_tr>
   10f81:	83 c4 10             	add    $0x10,%esp
    irq_disable_global();
   10f84:	e8 18 fe ff ff       	call   10da1 <irq_disable_global>
    int count = 0;
   10f89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        log_printf("first task: %d", count++);
   10f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f93:	8d 50 01             	lea    0x1(%eax),%edx
   10f96:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f99:	83 ec 08             	sub    $0x8,%esp
   10f9c:	50                   	push   %eax
   10f9d:	68 c1 19 01 00       	push   $0x119c1
   10fa2:	e8 12 06 00 00       	call   115b9 <log_printf>
   10fa7:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task, &init_task);
   10faa:	83 ec 08             	sub    $0x8,%esp
   10fad:	68 00 37 01 00       	push   $0x13700
   10fb2:	68 80 26 01 00       	push   $0x12680
   10fb7:	e8 31 f4 ff ff       	call   103ed <task_switch_from_to>
   10fbc:	83 c4 10             	add    $0x10,%esp
        log_printf("first task: %d", count++);
   10fbf:	eb cf                	jmp    10f90 <init_main+0xa0>

00010fc1 <hlt>:
    uint8_t * d = (uint8_t *)dest;
    while (size--) {
        *d++ = *s++;
    }
}

   10fc1:	55                   	push   %ebp
   10fc2:	89 e5                	mov    %esp,%ebp
void kernel_memset(void * dest, uint8_t v, int size) {
   10fc4:	f4                   	hlt
    if (!dest || !size) {
   10fc5:	90                   	nop
   10fc6:	5d                   	pop    %ebp
   10fc7:	c3                   	ret

00010fc8 <kernel_strcpy>:
void kernel_strcpy (char * dest, const char * src) {
   10fc8:	55                   	push   %ebp
   10fc9:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   10fcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fcf:	74 3b                	je     1100c <kernel_strcpy+0x44>
   10fd1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fd5:	74 35                	je     1100c <kernel_strcpy+0x44>
    while (*dest && *src) {
   10fd7:	eb 17                	jmp    10ff0 <kernel_strcpy+0x28>
        *dest++ = *src++;
   10fd9:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fdc:	8d 42 01             	lea    0x1(%edx),%eax
   10fdf:	89 45 0c             	mov    %eax,0xc(%ebp)
   10fe2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe5:	8d 48 01             	lea    0x1(%eax),%ecx
   10fe8:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10feb:	0f b6 12             	movzbl (%edx),%edx
   10fee:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   10ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff3:	0f b6 00             	movzbl (%eax),%eax
   10ff6:	84 c0                	test   %al,%al
   10ff8:	74 0a                	je     11004 <kernel_strcpy+0x3c>
   10ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ffd:	0f b6 00             	movzbl (%eax),%eax
   11000:	84 c0                	test   %al,%al
   11002:	75 d5                	jne    10fd9 <kernel_strcpy+0x11>
    *dest = '\0';
   11004:	8b 45 08             	mov    0x8(%ebp),%eax
   11007:	c6 00 00             	movb   $0x0,(%eax)
   1100a:	eb 01                	jmp    1100d <kernel_strcpy+0x45>
        return;
   1100c:	90                   	nop
}
   1100d:	5d                   	pop    %ebp
   1100e:	c3                   	ret

0001100f <kernel_strncpy>:
void kernel_strncpy(char * dest, const char * src, int size) {
   1100f:	55                   	push   %ebp
   11010:	89 e5                	mov    %esp,%ebp
   11012:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   11015:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11019:	74 61                	je     1107c <kernel_strncpy+0x6d>
   1101b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1101f:	74 5b                	je     1107c <kernel_strncpy+0x6d>
   11021:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11025:	74 55                	je     1107c <kernel_strncpy+0x6d>
    char * d = dest;
   11027:	8b 45 08             	mov    0x8(%ebp),%eax
   1102a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1102d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11030:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((size-- > 0) && (*s)) {
   11033:	eb 17                	jmp    1104c <kernel_strncpy+0x3d>
        *d++ = *s++;
   11035:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11038:	8d 42 01             	lea    0x1(%edx),%eax
   1103b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1103e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11041:	8d 48 01             	lea    0x1(%eax),%ecx
   11044:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11047:	0f b6 12             	movzbl (%edx),%edx
   1104a:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1104c:	8b 45 10             	mov    0x10(%ebp),%eax
   1104f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11052:	89 55 10             	mov    %edx,0x10(%ebp)
   11055:	85 c0                	test   %eax,%eax
   11057:	7e 0a                	jle    11063 <kernel_strncpy+0x54>
   11059:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1105c:	0f b6 00             	movzbl (%eax),%eax
   1105f:	84 c0                	test   %al,%al
   11061:	75 d2                	jne    11035 <kernel_strncpy+0x26>
    if (size == 0) {
   11063:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11067:	75 0b                	jne    11074 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   11069:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1106c:	83 e8 01             	sub    $0x1,%eax
   1106f:	c6 00 00             	movb   $0x0,(%eax)
   11072:	eb 09                	jmp    1107d <kernel_strncpy+0x6e>
        *d = '\0';
   11074:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11077:	c6 00 00             	movb   $0x0,(%eax)
   1107a:	eb 01                	jmp    1107d <kernel_strncpy+0x6e>
        return;
   1107c:	90                   	nop
}
   1107d:	c9                   	leave
   1107e:	c3                   	ret

0001107f <kernel_strlen>:
int kernel_strlen(const char * str) {
   1107f:	55                   	push   %ebp
   11080:	89 e5                	mov    %esp,%ebp
   11082:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   11085:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11089:	75 07                	jne    11092 <kernel_strlen+0x13>
        return 0;
   1108b:	b8 00 00 00 00       	mov    $0x0,%eax
   11090:	eb 26                	jmp    110b8 <kernel_strlen+0x39>
	const char * c = str;
   11092:	8b 45 08             	mov    0x8(%ebp),%eax
   11095:	89 45 fc             	mov    %eax,-0x4(%ebp)
	int len = 0;
   11098:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while (*c++) {
   1109f:	eb 04                	jmp    110a5 <kernel_strlen+0x26>
		len++;
   110a1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c++) {
   110a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110a8:	8d 50 01             	lea    0x1(%eax),%edx
   110ab:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110ae:	0f b6 00             	movzbl (%eax),%eax
   110b1:	84 c0                	test   %al,%al
   110b3:	75 ec                	jne    110a1 <kernel_strlen+0x22>
	return len;
   110b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   110b8:	c9                   	leave
   110b9:	c3                   	ret

000110ba <kernel_strncmp>:
int kernel_strncmp (const char * s1, const char * s2, int size) {
   110ba:	55                   	push   %ebp
   110bb:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   110bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110c1:	74 06                	je     110c9 <kernel_strncmp+0xf>
   110c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110c7:	75 0f                	jne    110d8 <kernel_strncmp+0x1e>
        return -1;
   110c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   110ce:	eb 62                	jmp    11132 <kernel_strncmp+0x78>
    	s1++;
   110d0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    	s2++;
   110d4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   110d8:	8b 45 08             	mov    0x8(%ebp),%eax
   110db:	0f b6 00             	movzbl (%eax),%eax
   110de:	84 c0                	test   %al,%al
   110e0:	74 20                	je     11102 <kernel_strncmp+0x48>
   110e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   110e5:	0f b6 00             	movzbl (%eax),%eax
   110e8:	84 c0                	test   %al,%al
   110ea:	74 16                	je     11102 <kernel_strncmp+0x48>
   110ec:	8b 45 08             	mov    0x8(%ebp),%eax
   110ef:	0f b6 10             	movzbl (%eax),%edx
   110f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   110f5:	0f b6 00             	movzbl (%eax),%eax
   110f8:	38 c2                	cmp    %al,%dl
   110fa:	75 06                	jne    11102 <kernel_strncmp+0x48>
   110fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11100:	75 ce                	jne    110d0 <kernel_strncmp+0x16>
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	0f b6 00             	movzbl (%eax),%eax
   11108:	84 c0                	test   %al,%al
   1110a:	74 21                	je     1112d <kernel_strncmp+0x73>
   1110c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1110f:	0f b6 00             	movzbl (%eax),%eax
   11112:	84 c0                	test   %al,%al
   11114:	74 17                	je     1112d <kernel_strncmp+0x73>
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	0f b6 10             	movzbl (%eax),%edx
   1111c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111f:	0f b6 00             	movzbl (%eax),%eax
   11122:	38 c2                	cmp    %al,%dl
   11124:	74 07                	je     1112d <kernel_strncmp+0x73>
   11126:	b8 01 00 00 00       	mov    $0x1,%eax
   1112b:	eb 05                	jmp    11132 <kernel_strncmp+0x78>
   1112d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11132:	5d                   	pop    %ebp
   11133:	c3                   	ret

00011134 <kernel_memcpy>:
void kernel_memcpy (void * dest, void * src, int size) {
   11134:	55                   	push   %ebp
   11135:	89 e5                	mov    %esp,%ebp
   11137:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1113a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1113e:	74 40                	je     11180 <kernel_memcpy+0x4c>
   11140:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11144:	74 3a                	je     11180 <kernel_memcpy+0x4c>
   11146:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1114a:	74 34                	je     11180 <kernel_memcpy+0x4c>
    uint8_t * s = (uint8_t *)src;
   1114c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1114f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   11152:	8b 45 08             	mov    0x8(%ebp),%eax
   11155:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   11158:	eb 17                	jmp    11171 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1115a:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1115d:	8d 42 01             	lea    0x1(%edx),%eax
   11160:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11163:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11166:	8d 48 01             	lea    0x1(%eax),%ecx
   11169:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1116c:	0f b6 12             	movzbl (%edx),%edx
   1116f:	88 10                	mov    %dl,(%eax)
    while (size--) {
   11171:	8b 45 10             	mov    0x10(%ebp),%eax
   11174:	8d 50 ff             	lea    -0x1(%eax),%edx
   11177:	89 55 10             	mov    %edx,0x10(%ebp)
   1117a:	85 c0                	test   %eax,%eax
   1117c:	75 dc                	jne    1115a <kernel_memcpy+0x26>
   1117e:	eb 01                	jmp    11181 <kernel_memcpy+0x4d>
        return;
   11180:	90                   	nop
}
   11181:	c9                   	leave
   11182:	c3                   	ret

00011183 <kernel_memset>:
void kernel_memset(void * dest, uint8_t v, int size) {
   11183:	55                   	push   %ebp
   11184:	89 e5                	mov    %esp,%ebp
   11186:	83 ec 14             	sub    $0x14,%esp
   11189:	8b 45 0c             	mov    0xc(%ebp),%eax
   1118c:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1118f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11193:	74 2c                	je     111c1 <kernel_memset+0x3e>
   11195:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11199:	74 26                	je     111c1 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1119b:	8b 45 08             	mov    0x8(%ebp),%eax
   1119e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   111a1:	eb 0f                	jmp    111b2 <kernel_memset+0x2f>
        *d++ = v;
   111a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111a6:	8d 50 01             	lea    0x1(%eax),%edx
   111a9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111ac:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   111b0:	88 10                	mov    %dl,(%eax)
    while (size--) {
   111b2:	8b 45 10             	mov    0x10(%ebp),%eax
   111b5:	8d 50 ff             	lea    -0x1(%eax),%edx
   111b8:	89 55 10             	mov    %edx,0x10(%ebp)
   111bb:	85 c0                	test   %eax,%eax
   111bd:	75 e4                	jne    111a3 <kernel_memset+0x20>
   111bf:	eb 01                	jmp    111c2 <kernel_memset+0x3f>
        return;
   111c1:	90                   	nop
    }
}
   111c2:	c9                   	leave
   111c3:	c3                   	ret

000111c4 <kernel_memcmp>:

int kernel_memcmp (void * d1, void * d2, int size) {
   111c4:	55                   	push   %ebp
   111c5:	89 e5                	mov    %esp,%ebp
   111c7:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   111ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ce:	74 06                	je     111d6 <kernel_memcmp+0x12>
   111d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111d4:	75 07                	jne    111dd <kernel_memcmp+0x19>
        return 1;
   111d6:	b8 01 00 00 00       	mov    $0x1,%eax
   111db:	eb 43                	jmp    11220 <kernel_memcmp+0x5c>
    }

	uint8_t * p_d1 = (uint8_t *)d1;
   111dd:	8b 45 08             	mov    0x8(%ebp),%eax
   111e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t * p_d2 = (uint8_t *)d2;
   111e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   111e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (size--) {
   111e9:	eb 23                	jmp    1120e <kernel_memcmp+0x4a>
		if (*p_d1++ != *p_d2++) {
   111eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   111ee:	8d 50 01             	lea    0x1(%eax),%edx
   111f1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   111f4:	0f b6 08             	movzbl (%eax),%ecx
   111f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111fa:	8d 50 01             	lea    0x1(%eax),%edx
   111fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11200:	0f b6 00             	movzbl (%eax),%eax
   11203:	38 c1                	cmp    %al,%cl
   11205:	74 07                	je     1120e <kernel_memcmp+0x4a>
			return 1;
   11207:	b8 01 00 00 00       	mov    $0x1,%eax
   1120c:	eb 12                	jmp    11220 <kernel_memcmp+0x5c>
	while (size--) {
   1120e:	8b 45 10             	mov    0x10(%ebp),%eax
   11211:	8d 50 ff             	lea    -0x1(%eax),%edx
   11214:	89 55 10             	mov    %edx,0x10(%ebp)
   11217:	85 c0                	test   %eax,%eax
   11219:	75 d0                	jne    111eb <kernel_memcmp+0x27>
		}
	}

	return 0;
   1121b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11220:	c9                   	leave
   11221:	c3                   	ret

00011222 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   11222:	55                   	push   %ebp
   11223:	89 e5                	mov    %esp,%ebp
   11225:	53                   	push   %ebx
   11226:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   11229:	8b 45 08             	mov    0x8(%ebp),%eax
   1122c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   1122f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11232:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   11235:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11239:	74 1d                	je     11258 <kernel_itoa+0x36>
   1123b:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1123f:	74 17                	je     11258 <kernel_itoa+0x36>
   11241:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11245:	74 11                	je     11258 <kernel_itoa+0x36>
   11247:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1124b:	74 0b                	je     11258 <kernel_itoa+0x36>
        *p = '\0';
   1124d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11250:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11253:	e9 05 01 00 00       	jmp    1135d <kernel_itoa+0x13b>
    }

    // 只支持十进制负数
    int signed_num = 0;
   11258:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   1125f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11263:	79 19                	jns    1127e <kernel_itoa+0x5c>
   11265:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11269:	75 13                	jne    1127e <kernel_itoa+0x5c>
        *p++ = '-';
   1126b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1126e:	8d 50 01             	lea    0x1(%eax),%edx
   11271:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11274:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11277:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   1127e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11282:	74 3b                	je     112bf <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   11284:	8b 0d 20 1a 01 00    	mov    0x11a20,%ecx
   1128a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1128d:	99                   	cltd
   1128e:	f7 7d 10             	idivl  0x10(%ebp)
   11291:	89 d0                	mov    %edx,%eax
   11293:	83 c0 0f             	add    $0xf,%eax
   11296:	01 c8                	add    %ecx,%eax
   11298:	0f b6 00             	movzbl (%eax),%eax
   1129b:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1129e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112a1:	8d 50 01             	lea    0x1(%eax),%edx
   112a4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112a7:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   112ab:	88 10                	mov    %dl,(%eax)
            num /= base;
   112ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   112b0:	99                   	cltd
   112b1:	f7 7d 10             	idivl  0x10(%ebp)
   112b4:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   112b7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   112bb:	75 c7                	jne    11284 <kernel_itoa+0x62>
   112bd:	eb 4d                	jmp    1130c <kernel_itoa+0xea>
    } else {
        uint32_t u_num = (uint32_t)num;
   112bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   112c5:	8b 0d 20 1a 01 00    	mov    0x11a20,%ecx
   112cb:	8b 5d 10             	mov    0x10(%ebp),%ebx
   112ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112d1:	ba 00 00 00 00       	mov    $0x0,%edx
   112d6:	f7 f3                	div    %ebx
   112d8:	89 d3                	mov    %edx,%ebx
   112da:	89 d8                	mov    %ebx,%eax
   112dc:	83 c0 0f             	add    $0xf,%eax
   112df:	01 c8                	add    %ecx,%eax
   112e1:	0f b6 00             	movzbl (%eax),%eax
   112e4:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   112e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112ea:	8d 50 01             	lea    0x1(%eax),%edx
   112ed:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112f0:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   112f4:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   112f6:	8b 4d 10             	mov    0x10(%ebp),%ecx
   112f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   112fc:	ba 00 00 00 00       	mov    $0x0,%edx
   11301:	f7 f1                	div    %ecx
   11303:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11306:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1130a:	75 b9                	jne    112c5 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1130c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1130f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11312:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11315:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   11318:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1131c:	74 08                	je     11326 <kernel_itoa+0x104>
   1131e:	8b 45 08             	mov    0x8(%ebp),%eax
   11321:	83 c0 01             	add    $0x1,%eax
   11324:	eb 03                	jmp    11329 <kernel_itoa+0x107>
   11326:	8b 45 08             	mov    0x8(%ebp),%eax
   11329:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1132c:	eb 27                	jmp    11355 <kernel_itoa+0x133>
        char ch = *start;
   1132e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11331:	0f b6 00             	movzbl (%eax),%eax
   11334:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11337:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1133a:	0f b6 10             	movzbl (%eax),%edx
   1133d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11340:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11342:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11345:	8d 50 ff             	lea    -0x1(%eax),%edx
   11348:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1134b:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1134f:	88 10                	mov    %dl,(%eax)
        start++;
   11351:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   11355:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11358:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1135b:	72 d1                	jb     1132e <kernel_itoa+0x10c>
    }
}
   1135d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11360:	c9                   	leave
   11361:	c3                   	ret

00011362 <kernel_sprintf>:

/**
 * @brief 格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   11362:	55                   	push   %ebp
   11363:	89 e5                	mov    %esp,%ebp
   11365:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   11368:	8d 45 10             	lea    0x10(%ebp),%eax
   1136b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   1136e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11371:	83 ec 04             	sub    $0x4,%esp
   11374:	50                   	push   %eax
   11375:	ff 75 0c             	push   0xc(%ebp)
   11378:	ff 75 08             	push   0x8(%ebp)
   1137b:	e8 06 00 00 00       	call   11386 <kernel_vsprintf>
   11380:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11383:	90                   	nop
   11384:	c9                   	leave
   11385:	c3                   	ret

00011386 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   11386:	55                   	push   %ebp
   11387:	89 e5                	mov    %esp,%ebp
   11389:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1138c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   11393:	8b 45 08             	mov    0x8(%ebp),%eax
   11396:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   11399:	e9 17 01 00 00       	jmp    114b5 <kernel_vsprintf+0x12f>
        switch (state) {
   1139e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   113a2:	74 0b                	je     113af <kernel_vsprintf+0x29>
   113a4:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   113a8:	74 2b                	je     113d5 <kernel_vsprintf+0x4f>
   113aa:	e9 06 01 00 00       	jmp    114b5 <kernel_vsprintf+0x12f>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   113af:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   113b3:	75 0c                	jne    113c1 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   113b5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   113bc:	e9 f4 00 00 00       	jmp    114b5 <kernel_vsprintf+0x12f>
                } else {
                    *curr++ = ch;
   113c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113c4:	8d 50 01             	lea    0x1(%eax),%edx
   113c7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113ca:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   113ce:	88 10                	mov    %dl,(%eax)
                }
                break;
   113d0:	e9 e0 00 00 00       	jmp    114b5 <kernel_vsprintf+0x12f>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   113d5:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   113d9:	75 31                	jne    1140c <kernel_vsprintf+0x86>
                    int num = va_arg(args, int);
   113db:	8b 45 10             	mov    0x10(%ebp),%eax
   113de:	8d 50 04             	lea    0x4(%eax),%edx
   113e1:	89 55 10             	mov    %edx,0x10(%ebp)
   113e4:	8b 00                	mov    (%eax),%eax
   113e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   113e9:	6a 0a                	push   $0xa
   113eb:	ff 75 e4             	push   -0x1c(%ebp)
   113ee:	ff 75 f8             	push   -0x8(%ebp)
   113f1:	e8 2c fe ff ff       	call   11222 <kernel_itoa>
   113f6:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   113f9:	ff 75 f8             	push   -0x8(%ebp)
   113fc:	e8 7e fc ff ff       	call   1107f <kernel_strlen>
   11401:	83 c4 04             	add    $0x4,%esp
   11404:	01 45 f8             	add    %eax,-0x8(%ebp)
   11407:	e9 a1 00 00 00       	jmp    114ad <kernel_vsprintf+0x127>
                } else if (ch == 'x') {
   1140c:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11410:	75 2e                	jne    11440 <kernel_vsprintf+0xba>
                    int num = va_arg(args, int);
   11412:	8b 45 10             	mov    0x10(%ebp),%eax
   11415:	8d 50 04             	lea    0x4(%eax),%edx
   11418:	89 55 10             	mov    %edx,0x10(%ebp)
   1141b:	8b 00                	mov    (%eax),%eax
   1141d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   11420:	6a 10                	push   $0x10
   11422:	ff 75 e8             	push   -0x18(%ebp)
   11425:	ff 75 f8             	push   -0x8(%ebp)
   11428:	e8 f5 fd ff ff       	call   11222 <kernel_itoa>
   1142d:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   11430:	ff 75 f8             	push   -0x8(%ebp)
   11433:	e8 47 fc ff ff       	call   1107f <kernel_strlen>
   11438:	83 c4 04             	add    $0x4,%esp
   1143b:	01 45 f8             	add    %eax,-0x8(%ebp)
   1143e:	eb 6d                	jmp    114ad <kernel_vsprintf+0x127>
                } else if (ch == 'c') {
   11440:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11444:	75 1f                	jne    11465 <kernel_vsprintf+0xdf>
                    char c = va_arg(args, int);
   11446:	8b 45 10             	mov    0x10(%ebp),%eax
   11449:	8d 50 04             	lea    0x4(%eax),%edx
   1144c:	89 55 10             	mov    %edx,0x10(%ebp)
   1144f:	8b 00                	mov    (%eax),%eax
   11451:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   11454:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11457:	8d 50 01             	lea    0x1(%eax),%edx
   1145a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1145d:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11461:	88 10                	mov    %dl,(%eax)
   11463:	eb 48                	jmp    114ad <kernel_vsprintf+0x127>
                } else if (ch == 's') {
   11465:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11469:	75 42                	jne    114ad <kernel_vsprintf+0x127>
                    const char * str = va_arg(args, char *);
   1146b:	8b 45 10             	mov    0x10(%ebp),%eax
   1146e:	8d 50 04             	lea    0x4(%eax),%edx
   11471:	89 55 10             	mov    %edx,0x10(%ebp)
   11474:	8b 00                	mov    (%eax),%eax
   11476:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   11479:	ff 75 f4             	push   -0xc(%ebp)
   1147c:	e8 fe fb ff ff       	call   1107f <kernel_strlen>
   11481:	83 c4 04             	add    $0x4,%esp
   11484:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   11487:	eb 17                	jmp    114a0 <kernel_vsprintf+0x11a>
                        *curr++ = *str++;
   11489:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1148c:	8d 42 01             	lea    0x1(%edx),%eax
   1148f:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11492:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11495:	8d 48 01             	lea    0x1(%eax),%ecx
   11498:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1149b:	0f b6 12             	movzbl (%edx),%edx
   1149e:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   114a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114a3:	8d 50 ff             	lea    -0x1(%eax),%edx
   114a6:	89 55 f0             	mov    %edx,-0x10(%ebp)
   114a9:	85 c0                	test   %eax,%eax
   114ab:	75 dc                	jne    11489 <kernel_vsprintf+0x103>
                    }
                }
                state = NORMAL;
   114ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   114b4:	90                   	nop
    while ((ch = *fmt++)) {
   114b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   114b8:	8d 50 01             	lea    0x1(%eax),%edx
   114bb:	89 55 0c             	mov    %edx,0xc(%ebp)
   114be:	0f b6 00             	movzbl (%eax),%eax
   114c1:	88 45 ef             	mov    %al,-0x11(%ebp)
   114c4:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   114c8:	0f 85 d0 fe ff ff    	jne    1139e <kernel_vsprintf+0x18>
        }
    }
}
   114ce:	90                   	nop
   114cf:	90                   	nop
   114d0:	c9                   	leave
   114d1:	c3                   	ret

000114d2 <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   114d2:	55                   	push   %ebp
   114d3:	89 e5                	mov    %esp,%ebp
   114d5:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   114d8:	83 ec 08             	sub    $0x8,%esp
   114db:	ff 75 14             	push   0x14(%ebp)
   114de:	68 d0 19 01 00       	push   $0x119d0
   114e3:	e8 d1 00 00 00       	call   115b9 <log_printf>
   114e8:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   114eb:	ff 75 10             	push   0x10(%ebp)
   114ee:	ff 75 0c             	push   0xc(%ebp)
   114f1:	ff 75 08             	push   0x8(%ebp)
   114f4:	68 e2 19 01 00       	push   $0x119e2
   114f9:	e8 bb 00 00 00       	call   115b9 <log_printf>
   114fe:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   11501:	e8 bb fa ff ff       	call   10fc1 <hlt>
   11506:	eb f9                	jmp    11501 <panic+0x2f>

00011508 <inb>:
/**
 * 日志输出
 *
 * 创建时间：2021年8月5日
 * 作者：李述铜
 * 联系邮箱: 527676163@qq.com
   11508:	55                   	push   %ebp
   11509:	89 e5                	mov    %esp,%ebp
   1150b:	83 ec 14             	sub    $0x14,%esp
   1150e:	8b 45 08             	mov    0x8(%ebp),%eax
   11511:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
 */
#include <stdarg.h>
#include "comm/cpu_instr.h"
   11515:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11519:	89 c2                	mov    %eax,%edx
   1151b:	ec                   	in     (%dx),%al
   1151c:	88 45 ff             	mov    %al,-0x1(%ebp)
#include "tools/klib.h"
   1151f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
#include "tools/log.h"
   11523:	c9                   	leave
   11524:	c3                   	ret

00011525 <outb>:
#define COM1_PORT           0x3F8       // RS232端口0初始化

/**
 * @brief 初始化日志输出
 */
void log_init (void) {
   11525:	55                   	push   %ebp
   11526:	89 e5                	mov    %esp,%ebp
   11528:	83 ec 08             	sub    $0x8,%esp
   1152b:	8b 55 08             	mov    0x8(%ebp),%edx
   1152e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11531:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11535:	88 45 f8             	mov    %al,-0x8(%ebp)
    outb(COM1_PORT + 1, 0x00);    // Disable all interrupts
   11538:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1153c:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11540:	ee                   	out    %al,(%dx)
    outb(COM1_PORT + 3, 0x80);    // Enable DLAB (set baud rate divisor)
   11541:	90                   	nop
   11542:	c9                   	leave
   11543:	c3                   	ret

00011544 <log_init>:
void log_init (void) {
   11544:	55                   	push   %ebp
   11545:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00);    // Disable all interrupts
   11547:	6a 00                	push   $0x0
   11549:	68 f9 03 00 00       	push   $0x3f9
   1154e:	e8 d2 ff ff ff       	call   11525 <outb>
   11553:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80);    // Enable DLAB (set baud rate divisor)
   11556:	68 80 00 00 00       	push   $0x80
   1155b:	68 fb 03 00 00       	push   $0x3fb
   11560:	e8 c0 ff ff ff       	call   11525 <outb>
   11565:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x03);    // Set divisor to 3 (lo byte) 38400 baud
   11568:	6a 03                	push   $0x3
   1156a:	68 f8 03 00 00       	push   $0x3f8
   1156f:	e8 b1 ff ff ff       	call   11525 <outb>
   11574:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);    //                  (hi byte)
   11577:	6a 00                	push   $0x0
   11579:	68 f9 03 00 00       	push   $0x3f9
   1157e:	e8 a2 ff ff ff       	call   11525 <outb>
   11583:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);    // 8 bits, no parity, one stop bit
   11586:	6a 03                	push   $0x3
   11588:	68 fb 03 00 00       	push   $0x3fb
   1158d:	e8 93 ff ff ff       	call   11525 <outb>
   11592:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xC7);    // Enable FIFO, clear them, with 14-byte threshold
   11595:	68 c7 00 00 00       	push   $0xc7
   1159a:	68 fa 03 00 00       	push   $0x3fa
   1159f:	e8 81 ff ff ff       	call   11525 <outb>
   115a4:	83 c4 08             	add    $0x8,%esp
  
    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
   115a7:	6a 0f                	push   $0xf
   115a9:	68 fc 03 00 00       	push   $0x3fc
   115ae:	e8 72 ff ff ff       	call   11525 <outb>
   115b3:	83 c4 08             	add    $0x8,%esp
}
   115b6:	90                   	nop
   115b7:	c9                   	leave
   115b8:	c3                   	ret

000115b9 <log_printf>:

/**
 * @brief 日志打印
 */
void log_printf(const char * fmt, ...) {
   115b9:	55                   	push   %ebp
   115ba:	89 e5                	mov    %esp,%ebp
   115bc:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   115c2:	83 ec 04             	sub    $0x4,%esp
   115c5:	68 80 00 00 00       	push   $0x80
   115ca:	6a 00                	push   $0x0
   115cc:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   115d2:	50                   	push   %eax
   115d3:	e8 ab fb ff ff       	call   11183 <kernel_memset>
   115d8:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   115db:	8d 45 0c             	lea    0xc(%ebp),%eax
   115de:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   115e4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   115ea:	83 ec 04             	sub    $0x4,%esp
   115ed:	50                   	push   %eax
   115ee:	ff 75 08             	push   0x8(%ebp)
   115f1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   115f7:	50                   	push   %eax
   115f8:	e8 89 fd ff ff       	call   11386 <kernel_vsprintf>
   115fd:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char * p = str_buf;    
   11600:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11606:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0') {
   11609:	eb 3b                	jmp    11646 <log_printf+0x8d>
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0);
   1160b:	90                   	nop
   1160c:	83 ec 0c             	sub    $0xc,%esp
   1160f:	68 fd 03 00 00       	push   $0x3fd
   11614:	e8 ef fe ff ff       	call   11508 <inb>
   11619:	83 c4 10             	add    $0x10,%esp
   1161c:	0f b6 c0             	movzbl %al,%eax
   1161f:	83 e0 40             	and    $0x40,%eax
   11622:	85 c0                	test   %eax,%eax
   11624:	74 e6                	je     1160c <log_printf+0x53>
        outb(COM1_PORT, *p++);
   11626:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11629:	8d 50 01             	lea    0x1(%eax),%edx
   1162c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1162f:	0f b6 00             	movzbl (%eax),%eax
   11632:	0f b6 c0             	movzbl %al,%eax
   11635:	83 ec 08             	sub    $0x8,%esp
   11638:	50                   	push   %eax
   11639:	68 f8 03 00 00       	push   $0x3f8
   1163e:	e8 e2 fe ff ff       	call   11525 <outb>
   11643:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0') {
   11646:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11649:	0f b6 00             	movzbl (%eax),%eax
   1164c:	84 c0                	test   %al,%al
   1164e:	75 bb                	jne    1160b <log_printf+0x52>
    }

    outb(COM1_PORT, '\r');
   11650:	83 ec 08             	sub    $0x8,%esp
   11653:	6a 0d                	push   $0xd
   11655:	68 f8 03 00 00       	push   $0x3f8
   1165a:	e8 c6 fe ff ff       	call   11525 <outb>
   1165f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   11662:	83 ec 08             	sub    $0x8,%esp
   11665:	6a 0a                	push   $0xa
   11667:	68 f8 03 00 00       	push   $0x3f8
   1166c:	e8 b4 fe ff ff       	call   11525 <outb>
   11671:	83 c4 10             	add    $0x10,%esp
}
   11674:	90                   	nop
   11675:	c9                   	leave
   11676:	c3                   	ret
